{
    "pipes": [],
    "interfaces": [
        {
            "name": "GymRecords",
            "id": "interface-GymRecords-d74b30ae2ba63d7ebb5e7f4b65e8c17c51448b9da6fd25a028eb0cb006617eea6afc8d044ea147e34034842277567b4ef35cc9b08d5fedf7b2e12e2a2cfb8990",
            "file": "src/app/services/interfaces/appwrite-db.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RunningAndCyclingRecords {\n  total: number;\n  documents: Array<RunningAndCyclingRecordsDocuments>;\n}\n\nexport interface RunningAndCyclingRecordsDocuments {\n  user_id: string;\n  distance: number;\n  record_time: string;\n  type: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface GymRecords {\n  total: number;\n  documents: Array<GymRecordsDocuments>;\n}\n\nexport interface GymRecordsDocuments {\n  user_id: string;\n  weight: number;\n  body_part: string;\n  excercise: string;\n  reps: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface Target {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  userId: string;\n  providerId: string | null;\n  providerType: string;\n  identifier: string;\n  expired: boolean;\n}\n\nexport interface User {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  registration: string;\n  status: boolean;\n  labels: string[];\n  passwordUpdate: string;\n  email: string;\n  phone: string;\n  emailVerification: boolean;\n  phoneVerification: boolean;\n  mfa: boolean;\n  prefs: Record<string, unknown>;\n  targets: Target[];\n  accessedAt: string;\n}\n",
            "properties": [
                {
                    "name": "documents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<GymRecordsDocuments>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GymRecordsDocuments",
            "id": "interface-GymRecordsDocuments-d74b30ae2ba63d7ebb5e7f4b65e8c17c51448b9da6fd25a028eb0cb006617eea6afc8d044ea147e34034842277567b4ef35cc9b08d5fedf7b2e12e2a2cfb8990",
            "file": "src/app/services/interfaces/appwrite-db.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RunningAndCyclingRecords {\n  total: number;\n  documents: Array<RunningAndCyclingRecordsDocuments>;\n}\n\nexport interface RunningAndCyclingRecordsDocuments {\n  user_id: string;\n  distance: number;\n  record_time: string;\n  type: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface GymRecords {\n  total: number;\n  documents: Array<GymRecordsDocuments>;\n}\n\nexport interface GymRecordsDocuments {\n  user_id: string;\n  weight: number;\n  body_part: string;\n  excercise: string;\n  reps: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface Target {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  userId: string;\n  providerId: string | null;\n  providerType: string;\n  identifier: string;\n  expired: boolean;\n}\n\nexport interface User {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  registration: string;\n  status: boolean;\n  labels: string[];\n  passwordUpdate: string;\n  email: string;\n  phone: string;\n  emailVerification: boolean;\n  phoneVerification: boolean;\n  mfa: boolean;\n  prefs: Record<string, unknown>;\n  targets: Target[];\n  accessedAt: string;\n}\n",
            "properties": [
                {
                    "name": "$collectionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "$createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "$databaseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "$id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "$permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "$updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "body_part",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "excercise",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "reps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RunningAndCyclingRecords",
            "id": "interface-RunningAndCyclingRecords-d74b30ae2ba63d7ebb5e7f4b65e8c17c51448b9da6fd25a028eb0cb006617eea6afc8d044ea147e34034842277567b4ef35cc9b08d5fedf7b2e12e2a2cfb8990",
            "file": "src/app/services/interfaces/appwrite-db.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RunningAndCyclingRecords {\n  total: number;\n  documents: Array<RunningAndCyclingRecordsDocuments>;\n}\n\nexport interface RunningAndCyclingRecordsDocuments {\n  user_id: string;\n  distance: number;\n  record_time: string;\n  type: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface GymRecords {\n  total: number;\n  documents: Array<GymRecordsDocuments>;\n}\n\nexport interface GymRecordsDocuments {\n  user_id: string;\n  weight: number;\n  body_part: string;\n  excercise: string;\n  reps: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface Target {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  userId: string;\n  providerId: string | null;\n  providerType: string;\n  identifier: string;\n  expired: boolean;\n}\n\nexport interface User {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  registration: string;\n  status: boolean;\n  labels: string[];\n  passwordUpdate: string;\n  email: string;\n  phone: string;\n  emailVerification: boolean;\n  phoneVerification: boolean;\n  mfa: boolean;\n  prefs: Record<string, unknown>;\n  targets: Target[];\n  accessedAt: string;\n}\n",
            "properties": [
                {
                    "name": "documents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<RunningAndCyclingRecordsDocuments>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RunningAndCyclingRecordsDocuments",
            "id": "interface-RunningAndCyclingRecordsDocuments-d74b30ae2ba63d7ebb5e7f4b65e8c17c51448b9da6fd25a028eb0cb006617eea6afc8d044ea147e34034842277567b4ef35cc9b08d5fedf7b2e12e2a2cfb8990",
            "file": "src/app/services/interfaces/appwrite-db.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RunningAndCyclingRecords {\n  total: number;\n  documents: Array<RunningAndCyclingRecordsDocuments>;\n}\n\nexport interface RunningAndCyclingRecordsDocuments {\n  user_id: string;\n  distance: number;\n  record_time: string;\n  type: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface GymRecords {\n  total: number;\n  documents: Array<GymRecordsDocuments>;\n}\n\nexport interface GymRecordsDocuments {\n  user_id: string;\n  weight: number;\n  body_part: string;\n  excercise: string;\n  reps: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface Target {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  userId: string;\n  providerId: string | null;\n  providerType: string;\n  identifier: string;\n  expired: boolean;\n}\n\nexport interface User {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  registration: string;\n  status: boolean;\n  labels: string[];\n  passwordUpdate: string;\n  email: string;\n  phone: string;\n  emailVerification: boolean;\n  phoneVerification: boolean;\n  mfa: boolean;\n  prefs: Record<string, unknown>;\n  targets: Target[];\n  accessedAt: string;\n}\n",
            "properties": [
                {
                    "name": "$collectionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "$createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "$databaseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "$id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "$permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "$updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "distance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "record_time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Target",
            "id": "interface-Target-d74b30ae2ba63d7ebb5e7f4b65e8c17c51448b9da6fd25a028eb0cb006617eea6afc8d044ea147e34034842277567b4ef35cc9b08d5fedf7b2e12e2a2cfb8990",
            "file": "src/app/services/interfaces/appwrite-db.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RunningAndCyclingRecords {\n  total: number;\n  documents: Array<RunningAndCyclingRecordsDocuments>;\n}\n\nexport interface RunningAndCyclingRecordsDocuments {\n  user_id: string;\n  distance: number;\n  record_time: string;\n  type: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface GymRecords {\n  total: number;\n  documents: Array<GymRecordsDocuments>;\n}\n\nexport interface GymRecordsDocuments {\n  user_id: string;\n  weight: number;\n  body_part: string;\n  excercise: string;\n  reps: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface Target {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  userId: string;\n  providerId: string | null;\n  providerType: string;\n  identifier: string;\n  expired: boolean;\n}\n\nexport interface User {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  registration: string;\n  status: boolean;\n  labels: string[];\n  passwordUpdate: string;\n  email: string;\n  phone: string;\n  emailVerification: boolean;\n  phoneVerification: boolean;\n  mfa: boolean;\n  prefs: Record<string, unknown>;\n  targets: Target[];\n  accessedAt: string;\n}\n",
            "properties": [
                {
                    "name": "$createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "$id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "$updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "expired",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "identifier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "providerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "providerType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d74b30ae2ba63d7ebb5e7f4b65e8c17c51448b9da6fd25a028eb0cb006617eea6afc8d044ea147e34034842277567b4ef35cc9b08d5fedf7b2e12e2a2cfb8990",
            "file": "src/app/services/interfaces/appwrite-db.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RunningAndCyclingRecords {\n  total: number;\n  documents: Array<RunningAndCyclingRecordsDocuments>;\n}\n\nexport interface RunningAndCyclingRecordsDocuments {\n  user_id: string;\n  distance: number;\n  record_time: string;\n  type: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface GymRecords {\n  total: number;\n  documents: Array<GymRecordsDocuments>;\n}\n\nexport interface GymRecordsDocuments {\n  user_id: string;\n  weight: number;\n  body_part: string;\n  excercise: string;\n  reps: number;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n\nexport interface Target {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  userId: string;\n  providerId: string | null;\n  providerType: string;\n  identifier: string;\n  expired: boolean;\n}\n\nexport interface User {\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  name: string;\n  registration: string;\n  status: boolean;\n  labels: string[];\n  passwordUpdate: string;\n  email: string;\n  phone: string;\n  emailVerification: boolean;\n  phoneVerification: boolean;\n  mfa: boolean;\n  prefs: Record<string, unknown>;\n  targets: Target[];\n  accessedAt: string;\n}\n",
            "properties": [
                {
                    "name": "$createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "$id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "$updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "accessedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "emailVerification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "labels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "mfa",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "passwordUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "phoneVerification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "prefs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | >",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "registration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "targets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Target[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AppwriteDbService",
            "id": "injectable-AppwriteDbService-f431b85547b89d91a70914f66b885ad6a713b6de1c04d2ae66acffabe1b0a7755637f4045b843e59d06ea488e02a1f5b4f22cd7980be433590f8deb3affaaad0",
            "file": "src/app/services/appwrite-db.service.ts",
            "properties": [
                {
                    "name": "database",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Databases",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "databaseId",
                    "defaultValue": "environment.databaseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "gymRecordsId",
                    "defaultValue": "environment.gymRecordsId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "runningAndCyclingRecordsId",
                    "defaultValue": "environment.runningAndCyclingRecordsId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createNewGymRecord",
                    "args": [
                        {
                            "name": "user_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "weight",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body_part",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "excercise",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "reps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GymRecordsDocuments | null>",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "weight",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body_part",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "excercise",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewRecord",
                    "args": [
                        {
                            "name": "user_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "record_time",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RunningAndCyclingRecordsDocuments | null>",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "record_time",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEnduranceRecord",
                    "args": [
                        {
                            "name": "record_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "record_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteGymRecord",
                    "args": [
                        {
                            "name": "record_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "record_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBestGymRecord",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "exercise",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GymRecordsDocuments | null>",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "exercise",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBestTimeRecord",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RunningAndCyclingRecordsDocuments | null>",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserGymRecords",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GymRecordsDocuments[]>",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserGymRecordsLength",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GymRecords>",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserGymRecordsPagination",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GymRecordsDocuments[]>",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserRecords",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RunningAndCyclingRecordsDocuments[]>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserRecordsLength",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RunningAndCyclingRecords>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserRecordsPagination",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RunningAndCyclingRecordsDocuments[]>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Databases, Query } from 'appwrite';\nimport { client } from '../../lib/appwrite';\nimport { environment } from '../../../environment';\nimport {\n  GymRecords,\n  GymRecordsDocuments,\n  RunningAndCyclingRecords,\n  RunningAndCyclingRecordsDocuments,\n} from './interfaces/appwrite-db.interfaces';\nimport { catchError, from, map, Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppwriteDbService {\n  private database: Databases;\n  private databaseId = environment.databaseId;\n  private runningAndCyclingRecordsId = environment.runningAndCyclingRecordsId;\n  private gymRecordsId = environment.gymRecordsId;\n\n  constructor() {\n    this.database = new Databases(client);\n  }\n\n  //get get get get get get get get get get get get get get get get\n\n  getUserRecords(\n    userId: string\n  ): Observable<RunningAndCyclingRecordsDocuments[]> {\n    if (!userId) {\n      return of([]);\n    }\n    return from(\n      this.database.listDocuments(\n        this.databaseId,\n        this.runningAndCyclingRecordsId,\n        [\n          Query.equal('user_id', userId),\n          Query.orderDesc('$createdAt'),\n          Query.limit(1),\n        ]\n      )\n    ).pipe(\n      map(\n        (response) => response.documents as RunningAndCyclingRecordsDocuments[]\n      ),\n      catchError((error) => {\n        console.error('Failed loading records:', error);\n        return of([]);\n      })\n    );\n  }\n\n  getUserRecordsLength(userId: string): Observable<RunningAndCyclingRecords> {\n    if (!userId) {\n      return of();\n    }\n    return from(\n      this.database.listDocuments(\n        this.databaseId,\n        this.runningAndCyclingRecordsId,\n        [Query.equal('user_id', userId)]\n      )\n    ).pipe(\n      map((response) => response as RunningAndCyclingRecords),\n      catchError((error) => {\n        console.error('Failed loading records:', error);\n        return of();\n      })\n    );\n  }\n\n  getUserRecordsPagination(\n    userId: string,\n    limit: number,\n    offset: number\n  ): Observable<RunningAndCyclingRecordsDocuments[]> {\n    if (!userId) {\n      return of([]);\n    }\n    return from(\n      this.database.listDocuments(\n        this.databaseId,\n        this.runningAndCyclingRecordsId,\n        [\n          Query.equal('user_id', userId),\n          Query.orderDesc('$createdAt'),\n          Query.limit(limit),\n          Query.offset(offset),\n        ]\n      )\n    ).pipe(\n      map(\n        (response) => response.documents as RunningAndCyclingRecordsDocuments[]\n      ),\n      catchError((error) => {\n        console.error('Failed loading records:', error);\n        return of([]);\n      })\n    );\n  }\n\n  getUserGymRecords(userId: string): Observable<GymRecordsDocuments[]> {\n    if (!userId) {\n      return of([]);\n    }\n    return from(\n      this.database.listDocuments(this.databaseId, this.gymRecordsId, [\n        Query.equal('user_id', userId),\n        Query.orderDesc('$createdAt'),\n        Query.limit(1),\n      ])\n    ).pipe(\n      map((response) => response.documents as GymRecordsDocuments[]),\n      catchError((error) => {\n        console.error('Failed loading records:', error);\n        return of([]);\n      })\n    );\n  }\n\n  getUserGymRecordsLength(userId: string): Observable<GymRecords> {\n    if (!userId) {\n      return of();\n    }\n    return from(\n      this.database.listDocuments(this.databaseId, this.gymRecordsId, [\n        Query.equal('user_id', userId),\n      ])\n    ).pipe(\n      map((response) => response as GymRecords),\n      catchError((error) => {\n        console.error('Failed loading records:', error);\n        return of();\n      })\n    );\n  }\n\n  getUserGymRecordsPagination(\n    userId: string,\n    limit: number,\n    offset: number\n  ): Observable<GymRecordsDocuments[]> {\n    if (!userId) {\n      return of([]);\n    }\n    return from(\n      this.database.listDocuments(this.databaseId, this.gymRecordsId, [\n        Query.equal('user_id', userId),\n        Query.orderDesc('$createdAt'),\n        Query.limit(limit),\n        Query.offset(offset),\n      ])\n    ).pipe(\n      map((response) => response.documents as GymRecordsDocuments[]),\n      catchError((error) => {\n        console.error('Failed loading records:', error);\n        return of([]);\n      })\n    );\n  }\n\n  getBestGymRecord(\n    userId: string,\n    exercise: string\n  ): Observable<GymRecordsDocuments | null> {\n    if (!userId || !exercise) {\n      return of(null);\n    }\n    return from(\n      this.database.listDocuments(this.databaseId, this.gymRecordsId, [\n        Query.equal('user_id', userId),\n        Query.equal('excercise', exercise),\n        Query.orderDesc('weight'),\n        Query.limit(1),\n      ])\n    ).pipe(\n      map((response) =>\n        response.documents.length > 0\n          ? (response.documents[0] as GymRecordsDocuments)\n          : null\n      ),\n      catchError((error) => {\n        console.error('Failed loading best gym record:', error);\n        return of(null);\n      })\n    );\n  }\n\n  getBestTimeRecord(\n    userId: string,\n    type: number,\n    distance: number\n  ): Observable<RunningAndCyclingRecordsDocuments | null> {\n    if (!userId || !type || !distance) {\n      return of(null);\n    }\n    return from(\n      this.database.listDocuments(\n        this.databaseId,\n        this.runningAndCyclingRecordsId,\n        [\n          Query.equal('user_id', userId),\n          Query.equal('type', type),\n          Query.equal('distance', distance),\n          Query.orderAsc('record_time'),\n          Query.limit(1),\n        ]\n      )\n    ).pipe(\n      map((response) =>\n        response.documents.length > 0\n          ? (response.documents[0] as RunningAndCyclingRecordsDocuments)\n          : null\n      ),\n      catchError((error) => {\n        console.error('Failed loading best time record:', error);\n        return of(null);\n      })\n    );\n  }\n\n  //get get get get get get get get get get get get get get get get\n\n  //create create create create create create create create create\n\n  createNewRecord(\n    user_id: string,\n    distance: number,\n    record_time: string,\n    type: number\n  ): Observable<RunningAndCyclingRecordsDocuments | null> {\n    return from(\n      this.database.createDocument(\n        this.databaseId,\n        this.runningAndCyclingRecordsId,\n        'unique()',\n        {\n          user_id,\n          distance,\n          record_time,\n          type,\n        }\n      )\n    ).pipe(\n      map((response) => response as RunningAndCyclingRecordsDocuments),\n      catchError((error) => {\n        console.error(error);\n        return of(null);\n      })\n    );\n  }\n\n  createNewGymRecord(\n    user_id: string,\n    weight: number,\n    body_part: string,\n    excercise: string,\n    reps: number\n  ): Observable<GymRecordsDocuments | null> {\n    return from(\n      this.database.createDocument(\n        this.databaseId,\n        this.gymRecordsId,\n        'unique()',\n        {\n          user_id,\n          weight,\n          body_part,\n          excercise,\n          reps,\n        }\n      )\n    ).pipe(\n      map((response) => response as GymRecordsDocuments),\n      catchError((error) => {\n        console.error(error);\n        return of(null);\n      })\n    );\n  }\n\n  //create create create create create create create create create\n\n  //delete delete delete delete delete delete delete delete delete\n\n  deleteEnduranceRecord(record_id: string): Observable<any> {\n    return from(\n      this.database.deleteDocument(\n        this.databaseId,\n        this.runningAndCyclingRecordsId,\n        record_id\n      )\n    ).pipe(\n      map((response) => response),\n      catchError((error) => {\n        console.error(error);\n        return of(null);\n      })\n    );\n  }\n\n  deleteGymRecord(record_id: string): Observable<any> {\n    return from(\n      this.database.deleteDocument(\n        this.databaseId,\n        this.gymRecordsId,\n        record_id\n      )\n    ).pipe(\n      map((response) => response),\n      catchError((error) => {\n        console.error(error);\n        return of(null);\n      })\n    );\n  }\n\n  //delete delete delete delete delete delete delete delete delete\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-0a6c8a7477905f61134105eae27bb7c988cb9c4cf8c77ce8e3ea8cae78c86119eaedc3a44565a3e9a62a29e9139acc93bbe8559bf77d6fda905420b9c448af89",
            "file": "src/app/services/auth-service.ts",
            "properties": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSessionChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loggedInUser$",
                    "defaultValue": "this.loggedInUserSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "loggedInUserSubject",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkCurrentSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ID, Account } from 'appwrite';\nimport { client } from '../../lib/appwrite';\nimport { Router } from '@angular/router';\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private account: Account;\n  private loggedInUserSubject = new BehaviorSubject<any>(null);\n  loggedInUser$ = this.loggedInUserSubject.asObservable();\n  constructor(private router: Router) {\n    this.account = new Account(client);\n    this.checkCurrentSession();\n  }\n\n  async login(email: string, password: string) {\n    await this.account.createEmailPasswordSession(email, password);\n    const user = await this.account.get();\n    this.loggedInUserSubject.next(user);\n  }\n\n  async register(email: string, password: string, name: string) {\n    try {\n      await this.account.create(ID.unique(), email, password, name);\n      return this.login(email, password);\n    } catch (error) {\n      console.error('Registration failed: ', error);\n      throw error;\n    }\n  }\n\n  async logout() {\n    try {\n      await this.account.deleteSession('current');\n      this.loggedInUserSubject.next(null);\n      this.router.navigate(['/welcome']);\n    } catch (error) {\n      console.error('Loggout failed: ', error);\n      throw error;\n    }\n  }\n\n  private isSessionChecked = false;\n  async checkCurrentSession(): Promise<void> {\n    if (this.isSessionChecked) return;\n    try {\n      const user = await this.account.get();\n      this.loggedInUserSubject.next(user);\n    } catch (error) {\n      console.warn('No active session');\n      this.loggedInUserSubject.next(null);\n    } finally {\n      this.isSessionChecked = true;\n    }\n  }\n}\n\nexport type User = {\n  email: string;\n  password: string;\n  name: string;\n};\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-5a16b91c1adae468f9da34cecb92a790b5fe4c8c1ee4d1e6c7dffb6b9b323bd076a52c35010be426331314e35f852c06d0c8e160ca0333927b4150b397b58025",
            "file": "src/app/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable, from } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { AuthService } from './services/auth-service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): Observable<boolean> {\n    return from(this.authService.checkCurrentSession()).pipe(\n      switchMap(() => this.authService.loggedInUser$),\n      map((user) => {\n        if (user) {\n          return true;\n        } else {\n          this.router.navigate(['/login']);\n          return false;\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        },
        {
            "name": "NoAuthGuard",
            "id": "injectable-NoAuthGuard-f86f1274466355b7d5afb0cd2d18b65600c7b720da5d43cccc5d43ea7ab3b5b044a8b3e4d265a231bad493771bcfe960853e82270bcc35c027ba9d6992684391",
            "file": "src/app/no-auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable, from } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { AuthService } from './services/auth-service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NoAuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): Observable<boolean> {\n    return from(this.authService.checkCurrentSession()).pipe(\n      switchMap(() => this.authService.loggedInUser$),\n      map((user) => {\n        if (user) {\n          this.router.navigate(['/home']);\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-a8c176e20d758ed5ade159aa08e6b7395daaab4718a6c3980c97b787428c789f9f3710ea05b232248b544d16258c6f03a80c76c723c16660da7b9a2b7e99acb0",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'PRBook'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { HeaderComponent } from './components/header/header.component';\nimport { FooterComponent } from './components/footer/footer.component';\n// import { ButtonComponent } from './components/elements/button/button.component';\n// import { CardComponent } from './components/elements/card/card.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, HeaderComponent, FooterComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'PRBook';\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- <app-button [label]=\"'Click me'\" size=\"medium\" (onClick)=\"clickFunction($event)\"></app-button>\n<app-card title=\"Testowy tytuł\" description=\"Testowe description bardzo dlugie\" [svgContent]=\"svg\"></app-card> -->\n\n<app-header />\n<div class=\"main-container\">\n    <div class=\"route-container\">\n        <router-outlet />\n    </div>\n</div>\n<app-footer />"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-da92f2041c65588601896d6c10edc1f70edb076b2c7c68551a5a7b78408aef95c436e8dd3455907f29707a7369cbbb8e8dfa92dcad75c8c2ee3430ce2f92d539",
            "file": "src/app/components/elements/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cutCornerLeft",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cutCornerRight",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateButtonSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './button.component.html',\n  styleUrl: './button.component.scss',\n})\nexport class ButtonComponent {\n  @Input() disabled: boolean = false;\n  @Input() label: string = 'Button';\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n  @Input() cutCornerLeft: boolean = false;\n  @Input() cutCornerRight: boolean = false;\n  @Output() onClick = new EventEmitter<Event>();\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event: any) {\n    this.updateButtonSize();\n  }\n\n  ngOnInit() {\n    this.updateButtonSize();\n  }\n\n  updateButtonSize() {\n    if (window.innerWidth <= 768) {\n      this.size = 'small';\n    } else if (window.innerWidth <= 1024) {\n      this.size = 'medium';\n    } else {\n      this.size = 'large';\n    }\n  }\n\n  public get classes(): string[] {\n    const mode = !this.disabled ? 'button-active' : 'button-disabled';\n    const cutCornerLeft = this.cutCornerLeft ? 'cut-left' : '';\n    const cutCornerRight = this.cutCornerRight ? 'cut-right' : '';\n    return ['button', mode, this.size, cutCornerLeft, cutCornerRight];\n  }\n}\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 44
                    }
                }
            },
            "templateData": "<button type=\"button\" [ngClass]=\"classes\" (click)=\"onClick.emit($event)\">\n    <p>{{label}}</p>\n</button>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-f178e0052886cc57c6092ffdb963d2e2c29fcc145ff240d7f73d8006332edaed1c93a837044d1ad1ae33dfa5c052d4fcfbffcb403d55ee2a03703868059b7769",
            "file": "src/app/components/elements/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'purple'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "delete",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "description",
                    "defaultValue": "'Example description!'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "pointer",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'desktop'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"desktop\" | \"mobile\"",
                    "decorators": []
                },
                {
                    "name": "svgContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitDelete",
                    "defaultValue": "new EventEmitter<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                },
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_svgContent",
                    "defaultValue": "`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\"\n            stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M2 12h1\" />\n            <path d=\"M6 8h-2a1 1 0 0 0 -1 1v6a1 1 0 0 0 1 1h2\" />\n            <path d=\"M6 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n            <path d=\"M9 12h6\" />\n            <path d=\"M15 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n            <path d=\"M18 8h2a1 1 0 0 1 1 1v6a1 1 0 0 1 -1 1h-2\" />\n            <path d=\"M22 12h-1\" />\n        </svg>`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "safeSvgContent",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SafeHtml",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-card',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './card.component.html',\n  styleUrl: './card.component.scss',\n})\nexport class CardComponent {\n  @Input() size: 'desktop' | 'mobile' = 'desktop';\n  @Input() title: string = 'Title';\n  @Input() description: string = 'Example description!';\n  @Input() color: string = 'purple';\n  @Input() pointer: boolean = false;\n  @Input() delete?: boolean = false;\n  @Output() onClick = new EventEmitter<Event>();\n  @Output() emitDelete = new EventEmitter<boolean>(true);\n  @Input() set svgContent(content: string) {\n    this._svgContent = content || this._svgContent;\n    this.safeSvgContent = this.sanitizer.bypassSecurityTrustHtml(content);\n  }\n\n  private _svgContent: string = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\"\n            stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M2 12h1\" />\n            <path d=\"M6 8h-2a1 1 0 0 0 -1 1v6a1 1 0 0 0 1 1h2\" />\n            <path d=\"M6 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n            <path d=\"M9 12h6\" />\n            <path d=\"M15 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n            <path d=\"M18 8h2a1 1 0 0 1 1 1v6a1 1 0 0 1 -1 1h-2\" />\n            <path d=\"M22 12h-1\" />\n        </svg>`;\n  safeSvgContent: SafeHtml = '';\n\n  constructor(private sanitizer: DomSanitizer) {\n    this.safeSvgContent = this.sanitizer.bypassSecurityTrustHtml(\n      this._svgContent\n    );\n  }\n\n  get svgContent(): string {\n    return this._svgContent;\n  }\n\n  public get classes(): string[] {\n    const mode = this.size === 'desktop' ? 'card-desktop' : 'card-mobile';\n    const pointer = this.pointer ? 'pointer' : 'no-pointer';\n    return ['card', mode, `card-${this.color}`, pointer];\n  }\n}\n",
            "styleUrl": "./card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "svgContent": {
                    "name": "svgContent",
                    "setSignature": {
                        "name": "svgContent",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "content",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "content",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "svgContent",
                        "type": "string",
                        "returnType": "string",
                        "line": 45
                    }
                },
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 49
                    }
                }
            },
            "templateData": "<div [ngClass]=\"classes\" (click)=\"onClick.emit($event)\">\n    <div class=\"card-image\">\n        <div class=\"svg-container\" [innerHTML]=\"safeSvgContent\"></div>\n    </div>\n    <div class=\"card-text\">\n        <div class=\"card-text-title\">\n            <h3>{{title}}</h3>\n        </div>\n        <div class=\"card-text-description\">\n            <p>{{description}}</p>\n        </div>\n    </div>\n    @if(delete){\n    <div class=\"card-delete\" (click)=\"emitDelete.emit(true)\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\"\n            class=\"icon icon-tabler icons-tabler-filled icon-tabler-trash\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path\n                d=\"M20 6a1 1 0 0 1 .117 1.993l-.117 .007h-.081l-.919 11a3 3 0 0 1 -2.824 2.995l-.176 .005h-8c-1.598 0 -2.904 -1.249 -2.992 -2.75l-.005 -.167l-.923 -11.083h-.08a1 1 0 0 1 -.117 -1.993l.117 -.007h16z\" />\n            <path\n                d=\"M14 2a2 2 0 0 1 2 2a1 1 0 0 1 -1.993 .117l-.007 -.117h-4l-.007 .117a1 1 0 0 1 -1.993 -.117a2 2 0 0 1 1.85 -1.995l.15 -.005h4z\" />\n        </svg>\n    </div>\n    }\n</div>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-73acb8df9bd983f99b3a87027fa0f2c7509b8bdbbc15359ca226a4a1fe3bdeba7d20be394360bf9008c46ac4f274101f9650cab0fc1a5bf5cc74d828870ba943",
            "file": "src/app/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "goToGithub",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToLinkedin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Component, Inject } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  standalone: true,\n  imports: [],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss',\n})\nexport class FooterComponent {\n  constructor(@Inject(DOCUMENT) private document: Document) {}\n\n  goToGithub() {\n    window.open('https://github.com/whit33y');\n  }\n\n  goToLinkedin() {\n    window.open('https://www.linkedin.com/in/jakub-bryska-b905b0279/');\n  }\n}\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<footer>\n    <div class=\"footer-container\">\n        <div>\n            <p>PRBook 2025</p>\n        </div>\n        <div class=\"footer-container-links\">\n            <div class=\"link\" (click)=\"goToGithub()\">\n                Github\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                    stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                    class=\"icon icon-tabler icons-tabler-outline icon-tabler-brand-github\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path\n                        d=\"M9 19c-4.3 1.4 -4.3 -2.5 -6 -3m12 5v-3.5c0 -1 .1 -1.4 -.5 -2c2.8 -.3 5.5 -1.4 5.5 -6a4.6 4.6 0 0 0 -1.3 -3.2a4.2 4.2 0 0 0 -.1 -3.2s-1.1 -.3 -3.5 1.3a12.3 12.3 0 0 0 -6.2 0c-2.4 -1.6 -3.5 -1.3 -3.5 -1.3a4.2 4.2 0 0 0 -.1 3.2a4.6 4.6 0 0 0 -1.3 3.2c0 4.6 2.7 5.7 5.5 6c-.6 .6 -.6 1.2 -.5 2v3.5\" />\n                </svg>\n            </div>\n            <div class=\"link\" (click)=\"goToLinkedin()\">\n                Linkedin\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                    stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                    class=\"icon icon-tabler icons-tabler-outline icon-tabler-brand-linkedin\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path d=\"M8 11v5\" />\n                    <path d=\"M8 8v.01\" />\n                    <path d=\"M12 16v-5\" />\n                    <path d=\"M16 16v-3a2 2 0 1 0 -4 0\" />\n                    <path d=\"M3 7a4 4 0 0 1 4 -4h10a4 4 0 0 1 4 4v10a4 4 0 0 1 -4 4h-10a4 4 0 0 1 -4 -4z\" />\n                </svg>\n            </div>\n        </div>\n    </div>\n</footer>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-944e9a8fb1c4b68bce0c6f93b95763f67654bddd825e2ff74c0d6365ff62ce7437a71a840dcaba2f8fb9b17e2a29ed0d96f7007d890f81c882c99ccfcb646774",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "route",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../elements/button/button.component';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter, Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth-service';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule ,ButtonComponent],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n})\nexport class HeaderComponent {\n  route: string = '';\n  isLoggedIn = false;\n  private authSubscription: Subscription | undefined;\n\n  constructor(private router: Router, private authService: AuthService) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationEnd))\n      .subscribe((event) => {\n        this.route = event.url;\n      });\n  }\n\n  ngOnInit() {\n    this.authSubscription = this.authService.loggedInUser$.subscribe((user) => {\n      this.isLoggedIn = !!user;\n    });\n  }\n\n  ngOnDestroy() {\n    this.authSubscription?.unsubscribe();\n  }\n\n  navigateTo(route: string) {\n    this.router.navigate([route]);\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n}\n",
            "styleUrl": "./header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<header>\n    <div class=\"header-container\">\n        <div class=\"header-left\">\n            <h1 (click)=\"navigateTo('/home')\">PRBook</h1>\n            <nav class=\"header-left-nav\">\n                @if(isLoggedIn){\n                <p (click)=\"navigateTo('/home')\" class=\"none\">Home</p>\n                <p (click)=\"navigateTo('/records')\">Records</p>\n                <p (click)=\"navigateTo('/history')\">PR History</p>\n                }@else {\n                <p (click)=\"navigateTo('/welcome')\">Home</p>\n                }\n            </nav>\n        </div>\n        @if(isLoggedIn){\n        <div class=\"header-right\">\n            <app-button label=\"Logout\" (onClick)=\"logout()\" />\n        </div>\n        }@else if (this.route !== '/login') {\n        <div class=\"header-right\">\n            <app-button label=\"Get started\" (onClick)=\"navigateTo('/login')\" />\n        </div>\n        }\n\n    </div>\n</header>"
        },
        {
            "name": "HomePageComponent",
            "id": "component-HomePageComponent-2af8bd64827d5cdd9bc67141cd3bff3343383d14b04703ba5f74ee72debbf27790dbea607cade32c0c8c297619905e098ecf266004140453b5d11de3617b48c5",
            "file": "src/app/pages/home-page/home-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activityTypesSvg",
                    "defaultValue": "activityTypesSvg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isMobile",
                    "defaultValue": "window.innerWidth <= 768",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "loadedGymRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GymRecordsDocuments[] | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "loadedRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RunningAndCyclingRecordsDocuments[] | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "loadingGym",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "loadGymRecords",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadUserRecords",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CardComponent",
                    "type": "component"
                },
                {
                    "name": "SpinnerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener } from '@angular/core';\nimport { AppwriteDbService } from '../../services/appwrite-db.service';\nimport { AuthService } from '../../services/auth-service';\nimport { CardComponent } from '../../components/elements/card/card.component';\nimport {\n  GymRecordsDocuments,\n  RunningAndCyclingRecordsDocuments,\n  User,\n} from '../../services/interfaces/appwrite-db.interfaces';\nimport { Router } from '@angular/router';\nimport { SpinnerComponent } from '../../components/spinner/spinner.component';\nimport { activityTypesSvg } from '../../data/record-data';\n\n@Component({\n  selector: 'app-home-page',\n  standalone: true,\n  imports: [CardComponent, SpinnerComponent],\n  templateUrl: './home-page.component.html',\n  styleUrl: './home-page.component.scss',\n})\nexport class HomePageComponent {\n  constructor(\n    private AppwriteDbService: AppwriteDbService,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  isMobile: boolean = window.innerWidth <= 768;\n\n  @HostListener('window:resize', ['$event'])\n  onResize() {\n    this.isMobile = window.innerWidth <= 768;\n  }\n\n  activityTypesSvg = activityTypesSvg\n  user?: User;\n  ngOnInit() {\n    this.authService.loggedInUser$.subscribe((user) => {\n      this.user = user;\n    });\n    this.loadUserRecords(this.user!.$id);\n    this.loadGymRecords(this.user!.$id);\n  }\n\n  loading: boolean = false;\n  loadedRecords: RunningAndCyclingRecordsDocuments[] | undefined;\n  loadUserRecords(id: string) {\n    this.loading = true;\n    this.AppwriteDbService.getUserRecords(id).subscribe({\n      next: (response) => {\n        this.loadedRecords = response;\n      },\n      error: (error) => {\n        console.error(error);\n      },\n      complete: () => {\n        this.loading = false;\n      },\n    });\n  }\n\n  loadingGym: boolean = false\n  loadedGymRecords: GymRecordsDocuments[] | undefined;\n  loadGymRecords(id: string){\n    this.loadingGym = true;\n    this.AppwriteDbService.getUserGymRecords(id).subscribe({\n      next: (response) => {\n        this.loadedGymRecords = response;\n      },\n      error: (error) => {\n        console.error(error);\n      },\n      complete: () => {\n        this.loadingGym = false;\n      },\n    });\n  }\n\n  navigateTo(route: string, params?: { [key: string]: any }) {\n    if (params) {\n      this.router.navigate([route], { queryParams: params });\n    } else {\n      this.router.navigate([route]);\n    }\n  }\n}\n",
            "styleUrl": "./home-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "AppwriteDbService",
                        "type": "AppwriteDbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "AppwriteDbService",
                        "type": "AppwriteDbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"home-page-container\">\n    <div class=\"home-page-add-container\">\n        <h2>Add new endurance sport record</h2>\n        <div class=\"home-page-add-container-cards\">\n            <div class=\"card\">\n                <app-card title=\"New running record!\" description=\"That was pretty fast!\"\n                    [svgContent]=\"activityTypesSvg[1]\" [size]=\"isMobile ? 'mobile': 'desktop'\" color=\"blue\"\n                    [pointer]='true' (onClick)=\"navigateTo('/new-record', {type: 'run'})\"></app-card>\n            </div>\n            <div class=\"card\">\n                <app-card title=\"New bikeing record!\" description=\"Great job!\" [svgContent]=\"activityTypesSvg[2]\"\n                    [size]=\"isMobile ? 'mobile': 'desktop'\" color=\"green\" [pointer]='true'\n                    (onClick)=\"navigateTo('/new-record', {type: 'bike'})\"></app-card>\n            </div>\n            <div class=\"card\">\n                <app-card title=\"New swiming record!\" description=\"Like a fish!\" [svgContent]=\"activityTypesSvg[3]\"\n                    [size]=\"isMobile ? 'mobile': 'desktop'\" color=\"red\" [pointer]='true'\n                    (onClick)=\"navigateTo('/new-record', {type: 'swim'})\"></app-card>\n            </div>\n        </div>\n        <h2>Add new strength record</h2>\n        <div class=\"home-page-add-container-cards\">\n            <div class=\"card\">\n                <app-card title=\"Chest, biceps, triceps\" description=\"Getting stronger huh?\"\n                    [size]=\"isMobile ? 'mobile': 'desktop'\" [pointer]='true'\n                    (onClick)=\"navigateTo('/new-record', {type: 'gym'})\"></app-card>\n            </div>\n        </div>\n    </div>\n    @if(!loading){\n    @if(loadedRecords!.length > 0){\n    <div>\n        <h2>Your last endurance/gym records</h2>\n        @if(loadedRecords![loadedRecords!.length-1].type === 1){\n        <app-card [title]=\"'Congratulations ' + loadedRecords![loadedRecords!.length-1].distance + 'km' + ' record'\"\n            [description]=\"loadedRecords![loadedRecords!.length-1].record_time\" [svgContent]=\"activityTypesSvg[1]\"\n            size='mobile'></app-card>\n        }@else if(loadedRecords![loadedRecords!.length-1].type === 2) {\n        <app-card [title]=\"'Congratulations ' + loadedRecords![loadedRecords!.length-1].distance + 'km' + ' record'\"\n            [description]=\"loadedRecords![loadedRecords!.length-1].record_time\" [svgContent]=\"activityTypesSvg[2]\"\n            size='mobile'></app-card>\n        }@else {\n        <app-card [title]=\"'Congratulations ' + loadedRecords![loadedRecords!.length-1].distance + 'km' + ' record'\"\n            [description]=\"loadedRecords![loadedRecords!.length-1].record_time\" [svgContent]=\"activityTypesSvg[3]\"\n            size='mobile'></app-card>\n        }\n        @if(loadedGymRecords){\n        <div class=\"gym-record\">\n            <app-card [title]=\"'Congratulations, new ' + loadedGymRecords[0].excercise + ' record'\"\n                [description]=\"'You lifted ' + loadedGymRecords[0].weight + 'kg in ' + loadedGymRecords[0].excercise + ' for ' + loadedGymRecords[0].reps + ' reps/seconds.'\"\n                size='mobile' color=\"blue\"></app-card>\n        </div>\n        }\n    </div>\n    }@else {\n    <h2>Your last recorded PR</h2>\n    <app-card title=\"Nothing to see here!\" description=\"Dont be shy, add your record!\"\n        [svgContent]=\"activityTypesSvg[1]\" size=\"mobile\"></app-card>\n    }\n    }@else {\n    <div class=\"home-page-container-loading\">\n        <app-spinner></app-spinner>\n    </div>\n    }\n</div>"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-40f030ba70bebfe2a6cddb6fe7ad71970365f12559a20873c7236e182ade196ab5236168b6e328ec27fd78dac3595496dd4b4163289ace035f73da29f8f9675c",
            "file": "src/app/pages/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "errorMessageLogin",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "forgot",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "register",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "registerForm",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n    confirmPassword: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n    name: new FormControl('', [Validators.required, Validators.minLength(3)]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateToHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../../components/elements/button/button.component';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth-service';\nimport {\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-login-page',\n  standalone: true,\n  imports: [ButtonComponent, ReactiveFormsModule],\n  templateUrl: './login-page.component.html',\n  styleUrl: './login-page.component.scss',\n})\nexport class LoginPageComponent {\n  register: boolean = false;\n  forgot: boolean = false;\n  loading: boolean = false;\n  error: string = '';\n  message: string = '';\n  registerForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n    confirmPassword: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n    name: new FormControl('', [Validators.required, Validators.minLength(3)]),\n  });\n\n  loginForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n  });\n\n  constructor(private router: Router, private authService: AuthService) {}\n  errorMessageLogin: string = '';\n  sendLogin() {\n    this.loading = true;\n    setTimeout(() => {\n      this.authService\n        .login(this.loginForm.value.email!, this.loginForm.value.password!)\n        .then(() => {\n          this.loading = false;\n          this.router.navigate(['/home']);\n        })\n        .catch((error) => {\n          this.loading = false;\n          this.errorMessageLogin = error;\n          console.error('Something went wrong during login: ', error);\n        });\n    }, 1000);\n  }\n\n  sendRegister() {\n    this.loading = true;\n    if (\n      this.registerForm.value.password ===\n        this.registerForm.value.confirmPassword &&\n      this.registerForm.valid\n    ) {\n      setTimeout(() => {\n        this.authService\n          .register(\n            this.registerForm.value.email!,\n            this.registerForm.value.password!,\n            this.registerForm.value.name!\n          )\n          .then(() => {\n            this.loading = false;\n            setTimeout(() => {\n              this.message = 'Sucessfully registered!';\n            }, 1000);\n            this.router.navigate(['/home']);\n          })\n          .catch((error) => {\n            this.loading = false;\n            console.error('Something went wrong during registration: ', error);\n          });\n      }, 2000);\n    } else {\n      this.loading = false;\n      this.error = 'Please fix the errors before submitting.';\n      return;\n    }\n  }\n\n  sendLogout() {\n    this.authService.logout();\n  }\n\n  navigateToHome() {\n    this.router.navigate(['/home']);\n  }\n}\n",
            "styleUrl": "./login-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"login-page-container\">\n    @if(!loading){\n    @if(!register && !forgot){\n    <div class=\"login-page-container-form-login\" [formGroup]=\"loginForm\">\n        <h3>Login to PRBook!</h3>\n        <div class=\"login-page-container-form-login-input\">\n            <p>Email</p>\n            <input type=\"text\" placeholder=\"Enter you email\" class=\"input\" formControlName=\"email\" />\n            @if (loginForm.get('email')?.invalid && loginForm.get('email')?.touched) {\n            <p class=\"red\">\n                @if (loginForm.get('email')?.hasError('required')) { Email is required }\n                @if (loginForm.get('email')?.hasError('email')) { Enter a valid email }\n            </p>\n            }\n        </div>\n        <div class=\"login-page-container-form-login-input\">\n            <p>Password</p>\n            <input type=\"password\" placeholder=\"Enter your password\" class=\"input\" formControlName=\"password\" />\n            @if (loginForm.get('password')?.invalid && loginForm.get('password')?.touched) {\n            <p class=\"red\">\n                @if (loginForm.get('password')?.hasError('required')) { Password is required }\n                @if (loginForm.get('password')?.hasError('minlength')) { Password must be at least 8 characters }\n            </p>\n            }\n        </div>\n        <!-- <div class=\"login-page-container-form-login-remember\">\n            <p>Forgot password? <span class=\"login-page-container-switch-span\" (click)=\"forgot = !forgot\">Click\n                    here</span></p>\n        </div> -->\n        <div class=\"login-page-container-form-login-button\">\n            <app-button size=\"medium\" label=\"Login\" (onClick)=\"sendLogin()\"></app-button>\n            @if(errorMessageLogin){\n            <p class=\"red\">{{errorMessageLogin}}</p>\n            }\n        </div>\n    </div>\n    }@else if(forgot && !register){\n    <div class=\"login-page-container-form-login\">\n        <h3>Restore password to PRBook!</h3>\n        <div class=\"login-page-container-form-login-input\">\n            <p>Email</p>\n            <input type=\"text\" placeholder=\"Enter you email\" class=\"input\" />\n        </div>\n        <div class=\"login-page-container-form-register-button\">\n            <app-button size=\"medium\" label=\"Restore password\"></app-button>\n        </div>\n        <div class=\"login-page-container-form-login-remember\">\n            <p>Or maybe you want go back to login?<span class=\"login-page-container-switch-span\"\n                    (click)=\"forgot = !forgot\">Click here</span></p>\n        </div>\n    </div>\n    }\n    @else {\n    <div class=\"login-page-container-form-register\" [formGroup]=\"registerForm\">\n        <h3>Register to PRBook!</h3>\n        <div class=\"login-page-container-form-register-input\">\n            <p>Email</p>\n            <input type=\"email\" placeholder=\"Enter you email\" formControlName=\"email\" class=\"input\" />\n            @if (registerForm.get('email')?.invalid && registerForm.get('email')?.touched) {\n            <p class=\"red\">\n                @if (registerForm.get('email')?.hasError('required')) { Email is required }\n                @if (registerForm.get('email')?.hasError('email')) { Enter a valid email }\n            </p>\n            }\n        </div>\n        <div class=\"login-page-container-form-register-input\">\n            <p>Name</p>\n            <input type=\"text\" placeholder=\"Enter you name\" formControlName=\"name\" class=\"input\" />\n            @if (registerForm.get('name')?.invalid && registerForm.get('name')?.touched) {\n            <p class=\"red\">\n                @if (registerForm.get('name')?.hasError('required')) { Name is required }\n                @if (registerForm.get('name')?.hasError('minlength')) { Name must be at least 3 characters }\n            </p>\n            }\n        </div>\n        <div class=\"login-page-container-form-register-input\">\n            <p>Password</p>\n            <input type=\"password\" placeholder=\"Enter your password\" formControlName=\"password\" class=\"input\" />\n            @if (registerForm.get('password')?.invalid && registerForm.get('password')?.touched) {\n            <p class=\"red\">\n                @if (registerForm.get('password')?.hasError('required')) { Password is required }\n                @if (registerForm.get('password')?.hasError('minlength')) { Password must be at least 8 characters }\n            </p>\n            }\n        </div>\n        <div class=\"login-page-container-form-register-input\">\n            <p>Confirm password</p>\n            <input type=\"password\" placeholder=\"Confirm your password\" formControlName=\"confirmPassword\"\n                class=\"input\" />\n            @if (registerForm.get('confirmPassword')?.invalid && registerForm.get('confirmPassword')?.touched) {\n            <p class=\"red\">\n                @if (registerForm.get('confirmPassword')?.hasError('required')) { Confirm Password is required }\n                @if (registerForm.get('confirmPassword')?.hasError('minlength')) { Confirm Password must be at least 8\n                characters }\n            </p>\n            }\n\n            @if (registerForm.get('password')?.value !== registerForm.get('confirmPassword')?.value &&\n            registerForm.get('confirmPassword')?.touched) {\n            <p class=\"red\">Passwords do not match</p>\n            }\n        </div>\n        <div class=\"login-page-container-form-register-button\">\n            <app-button size=\"medium\" label=\"Register\" (onClick)=\"sendRegister()\"></app-button>\n        </div>\n    </div>\n    }\n    <div class=\"login-page-container-switch\">\n        @if(!register && !forgot){\n        <p>You dont have an account? <span class=\"login-page-container-switch-span\"\n                (click)=\"register = !register\">Register\n                now!</span></p>\n        }@else {\n        <p>You have an account? <span class=\"login-page-container-switch-span\"\n                (click)=\"register = !register && forgot = !forgot\">Login\n                now!</span></p>\n        }\n    </div>\n    }@else {\n    <p>Loading please wait...</p>\n    }\n    <p>{{message}}</p>\n</div>"
        },
        {
            "name": "NewRecordPageComponent",
            "id": "component-NewRecordPageComponent-89c83c42c43a8bc7504bb97e241f3d9c2db42169b136f0e442c1655f3bfae409e549092a80edcc8620660b63559dd0dda3a5a2919eeeb534863e25034b4710cb",
            "file": "src/app/pages/new-record-page/new-record-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-record-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./new-record-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyPart",
                    "defaultValue": "bodyPart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "bodyPartExercises",
                    "defaultValue": "bodyPartExercises",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "cyclingDistances",
                    "defaultValue": "cyclingDistances",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isEndurance",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "isGym",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "newGymRecord",
                    "defaultValue": "new FormGroup({\n    weight: new FormControl(1, [Validators.required, Validators.min(0)]),\n    bodyPart: new FormControl('Chest'),\n    excercise: new FormControl('Bench Press'),\n    reps: new FormControl(1, [Validators.required, Validators.min(1)]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "newRecord",
                    "defaultValue": "new FormGroup({\n    type: new FormControl('run', [Validators.required]),\n    distance: new FormControl(0.1),\n    time: new FormControl('', [\n      Validators.required,\n      Validators.pattern(/^([0-9]{2}):([0-5][0-9]):([0-5][0-9])$/),\n      Validators.maxLength(8),\n    ]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Params",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "runningDistances",
                    "defaultValue": "runningDistances",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "successMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "swimmingDistances",
                    "defaultValue": "swimmingDistances",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "addRecord",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addRecordGym",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changeType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBodyPartChange",
                    "args": [
                        {
                            "name": "bodyPart",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bodyPart",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTypeChange",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateTimeInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { AppwriteDbService } from '../../services/appwrite-db.service';\nimport { AuthService } from '../../services/auth-service';\nimport {\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { ButtonComponent } from '../../components/elements/button/button.component';\nimport {\n  bodyPart,\n  bodyPartExercises,\n  cyclingDistances,\n  runningDistances,\n  swimmingDistances,\n} from '../../data/record-data';\nimport { User } from '../../services/interfaces/appwrite-db.interfaces';\n\n@Component({\n  selector: 'app-new-record-page',\n  standalone: true,\n  imports: [ReactiveFormsModule, ButtonComponent],\n  templateUrl: './new-record-page.component.html',\n  styleUrl: './new-record-page.component.scss',\n})\nexport class NewRecordPageComponent {\n  user?: User;\n  runningDistances = runningDistances;\n  cyclingDistances = cyclingDistances;\n  swimmingDistances = swimmingDistances;\n  bodyPart = bodyPart;\n  bodyPartExercises = bodyPartExercises;\n\n  constructor(\n    private route: ActivatedRoute,\n    private AppwriteDbService: AppwriteDbService,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  params?: Params;\n  type?: string;\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((params) => {\n      this.params = params;\n      this.type = this.params['type'];\n      if (this.type === 'run') {\n        this.newRecord.setValue({ type: 'run', distance: 0.1, time: '' });\n        this.isEndurance = true;\n        this.isGym = false;\n      } else if (this.type === 'bike') {\n        this.newRecord.setValue({ type: 'bike', distance: 10, time: '' });\n        this.isEndurance = true;\n        this.isGym = false;\n      } else if (this.type === 'swim') {\n        this.newRecord.setValue({ type: 'swim', distance: 0.1, time: '' });\n        this.isEndurance = true;\n        this.isGym = false;\n      } else if (this.type === 'gym') {\n        this.isEndurance = false;\n        this.isGym = true;\n      } else {\n        this.isEndurance = true;\n        this.isGym = false;\n      }\n    });\n    this.authService.loggedInUser$.subscribe((user) => {\n      this.user = user;\n    });\n  }\n\n  newRecord = new FormGroup({\n    type: new FormControl('run', [Validators.required]),\n    distance: new FormControl(0.1),\n    time: new FormControl('', [\n      Validators.required,\n      Validators.pattern(/^([0-9]{2}):([0-5][0-9]):([0-5][0-9])$/),\n      Validators.maxLength(8),\n    ]),\n  });\n\n  newGymRecord = new FormGroup({\n    weight: new FormControl(1, [Validators.required, Validators.min(0)]),\n    bodyPart: new FormControl('Chest'),\n    excercise: new FormControl('Bench Press'),\n    reps: new FormControl(1, [Validators.required, Validators.min(1)]),\n  });\n\n  validateTimeInput(event: any): void {\n    let input = event.target.value.replace(/[^0-9]/g, '');\n    if (input.length > 6) {\n      input = input.substring(0, 6);\n    }\n    let formatted = '';\n    if (input.length > 0) {\n      formatted += input.substring(0, 2);\n    }\n    if (input.length > 2) {\n      formatted += ':' + input.substring(2, 4);\n    }\n    if (input.length > 4) {\n      formatted += ':' + input.substring(4, 6);\n    }\n    event.target.value = formatted;\n    this.newRecord.get('time')?.setValue(formatted, { emitEvent: false });\n  }\n\n  successMessage: boolean = false;\n  addRecord() {\n    let discipline = 1;\n    if (this.newRecord.value.type === 'run') {\n      discipline = 1;\n    } else if (this.newRecord.value.type === 'bike') {\n      discipline = 2;\n    } else {\n      discipline = 3;\n    }\n    this.AppwriteDbService.createNewRecord(\n      this.user!.$id,\n      Number(this.newRecord.value.distance!),\n      this.newRecord.value.time!,\n      discipline\n    ).subscribe({\n      next: (response) => {\n        this.successMessage = true;\n        setTimeout(() => {\n          this.router.navigate(['/']);\n        }, 1500);\n      },\n      error: (error) => {\n        console.error('Error: ', error);\n      },\n      complete: () => {},\n    });\n  }\n\n  addRecordGym() {\n    this.AppwriteDbService.createNewGymRecord(\n      this.user!.$id,\n      Number(this.newGymRecord.value.weight!),\n      this.newGymRecord.value.bodyPart!,\n      this.newGymRecord.value.excercise!,\n      this.newGymRecord.value.reps!\n    ).subscribe({\n      next: (respoonse) => {\n        this.successMessage = true;\n        setTimeout(() => {\n          this.router.navigate(['/']);\n        }, 1500);\n      },\n      error: (error) => {\n        console.error(error);\n      },\n      complete: () => {},\n    });\n  }\n\n  isGym: boolean = false;\n  isEndurance: boolean = false;\n  changeType(type: string) {\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: { type: type },\n      queryParamsHandling: 'merge',\n    });\n    if (type === 'gym') {\n      this.isGym = true;\n      this.isEndurance = false;\n    } else {\n      this.isGym = false;\n      this.isEndurance = true;\n    }\n  }\n\n  onTypeChange(type: string) {\n    this.type = type;\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: { type: type },\n      queryParamsHandling: 'merge',\n    });\n    let defaultDistance = 0.1;\n    if (type === 'bike') {\n      defaultDistance = 10;\n    } else if (type === 'swim') {\n      defaultDistance = 0.1;\n    }\n    this.newRecord.patchValue({ distance: defaultDistance });\n  }\n\n  onBodyPartChange(bodyPart: string) {\n    if (bodyPart === 'Chest') {\n      this.newGymRecord.setValue({\n        weight: 0,\n        bodyPart: bodyPart,\n        excercise: this.bodyPartExercises.Chest[0],\n        reps: 1,\n      });\n    }\n    if (bodyPart === 'Back') {\n      this.newGymRecord.setValue({\n        weight: 0,\n        bodyPart: bodyPart,\n        excercise: this.bodyPartExercises.Back[0],\n        reps: 1,\n      });\n    }\n    if (bodyPart === 'Legs') {\n      this.newGymRecord.setValue({\n        weight: 0,\n        bodyPart: bodyPart,\n        excercise: this.bodyPartExercises.Legs[0],\n        reps: 1,\n      });\n    }\n    if (bodyPart === 'Shoulders') {\n      this.newGymRecord.setValue({\n        weight: 0,\n        bodyPart: bodyPart,\n        excercise: this.bodyPartExercises.Shoulders[0],\n        reps: 1,\n      });\n    }\n    if (bodyPart === 'Arms') {\n      this.newGymRecord.setValue({\n        weight: 0,\n        bodyPart: bodyPart,\n        excercise: this.bodyPartExercises.Arms[0],\n        reps: 1,\n      });\n    }\n    if (bodyPart === 'Core') {\n      this.newGymRecord.setValue({\n        weight: 0,\n        bodyPart: bodyPart,\n        excercise: this.bodyPartExercises.Core[0],\n        reps: 1,\n      });\n    }\n  }\n}\n",
            "styleUrl": "./new-record-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "AppwriteDbService",
                        "type": "AppwriteDbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "AppwriteDbService",
                        "type": "AppwriteDbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"new-record-page-container\">\n  <div class=\"new-record-page-header-container\">\n    <div class=\"new-record-page-header-container-title\">\n      <h2>Add your new record</h2>\n    </div>\n    @if(!successMessage){\n    <div class=\"new-record-page-header-container-buttons\">\n      <app-button label=\"Endurance\" (onClick)=\"changeType('run')\" [disabled]=\"isEndurance\"\n        [cutCornerRight]=\"true\"></app-button>\n      <app-button label=\"Gym record\" (onClick)=\"changeType('gym')\" [disabled]=\"isGym\"\n        [cutCornerLeft]=\"true\"></app-button>\n    </div>\n    } @if(successMessage){\n    <p class=\"green\">Successfully added new record!</p>\n    }\n  </div>\n  @if(!successMessage){ @if(isEndurance){\n  <div class=\"new-record-page-form-container\" [formGroup]=\"newRecord\">\n    <div class=\"new-record-page-form-container-element\">\n      <label for=\"discipline\">Select type:</label>\n      <select name=\"discipline\" id=\"discipline\" formControlName=\"type\"\n        (change)=\"onTypeChange(this.newRecord.value.type!)\">\n        <option value=\"run\">Running</option>\n        <option value=\"bike\">Cycling</option>\n        <option value=\"swim\">Swimming</option>\n      </select>\n    </div>\n    <div class=\"new-record-page-form-container-element\">\n      <label for=\"distance\">Select distance:</label>\n      <select name=\"distance\" id=\"distance\" formControlName=\"distance\">\n        @if(newRecord.value.type === 'run'){ @for(value of runningDistances;\n        track $index){\n        <option [value]=\"value\">{{ value }} kilometers</option>\n        } } @if(newRecord.value.type === 'bike'){ @for(value of\n        cyclingDistances; track $index){\n        <option [value]=\"value\">{{ value }} kilometers</option>\n        } } @if(newRecord.value.type === 'swim'){ @for(value of\n        swimmingDistances; track $index){\n        <option [value]=\"value\">{{ value }} kilometers</option>\n        } }\n      </select>\n    </div>\n    <div class=\"new-record-page-form-container-element\">\n      <label for=\"time\">Enter time (hh:mm:ss):</label>\n      <input type=\"text\" id=\"time\" formControlName=\"time\" placeholder=\"hh:mm:ss\"\n        pattern=\"^([0-9]{2}):([0-5][0-9]):([0-5][0-9])$\" maxlength=\"8\" required (input)=\"validateTimeInput($event)\" />\n      @if (newRecord.get('time')?.invalid && newRecord.get('time')?.touched) {\n      <div class=\"error\">Please enter time in hh:mm:ss format.</div>\n      }\n    </div>\n    <app-button (click)=\"addRecord()\" label=\"Add new record\" [disabled]=\"newRecord.invalid\" />\n  </div>\n  }@else {\n  <div class=\"new-record-page-form-container-gym\" [formGroup]=\"newGymRecord\">\n    <div class=\"new-record-page-form-container-gym-element\">\n      <label for=\"body-part\">Body part:</label>\n      <select name=\"body-part\" id=\"body-part\" formControlName=\"bodyPart\"\n        (change)=\"onBodyPartChange(newGymRecord.value.bodyPart!)\">\n        @for(part of bodyPart; track $index){\n        <option [value]=\"part\">{{ part }}</option>\n        }\n      </select>\n    </div>\n    <div class=\"new-record-page-form-container-gym-element\">\n      <label for=\"excercise\">Excercise:</label>\n      <select name=\"excercise\" id=\"excercise\" formControlName=\"excercise\">\n        @if(newGymRecord.value.bodyPart === 'Chest'){ @for(excercise of\n        bodyPartExercises.Chest; track $index){\n        <option [value]=\"excercise\">{{ excercise }}</option>\n        } } @if(newGymRecord.value.bodyPart === 'Back'){ @for(excercise of\n        bodyPartExercises.Back; track $index){\n        <option [value]=\"excercise\">{{ excercise }}</option>\n        } } @if(newGymRecord.value.bodyPart === 'Legs'){ @for(excercise of\n        bodyPartExercises.Legs; track $index){\n        <option [value]=\"excercise\">{{ excercise }}</option>\n        } } @if(newGymRecord.value.bodyPart === 'Shoulders'){ @for(excercise of\n        bodyPartExercises.Shoulders; track $index){\n        <option [value]=\"excercise\">{{ excercise }}</option>\n        } } @if(newGymRecord.value.bodyPart === 'Arms'){ @for(excercise of\n        bodyPartExercises.Arms; track $index){\n        <option [value]=\"excercise\">{{ excercise }}</option>\n        } } @if(newGymRecord.value.bodyPart === 'Core'){ @for(excercise of\n        bodyPartExercises.Core; track $index){\n        <option [value]=\"excercise\">{{ excercise }}</option>\n        } }\n      </select>\n    </div>\n    <div class=\"new-record-page-form-container-gym-element\">\n      <label for=\"weight\">Weight:</label>\n      <input type=\"text\" id=\"weight\" formControlName=\"weight\" min=\"0\" />\n      @if (newGymRecord.get('weight')?.invalid &&\n      newGymRecord.get('weight')?.touched) {\n      <div class=\"error\">Weight must be at least 0.</div>\n      }\n    </div>\n    <div class=\"new-record-page-form-container-gym-element\">\n      <label for=\"reps\">Reps:</label>\n      <input type=\"number\" id=\"reps\" formControlName=\"reps\" min=\"1\" />\n      @if (newGymRecord.get('reps')?.invalid &&\n      newGymRecord.get('reps')?.touched) {\n      <div class=\"error\">Reps must be at least 1.</div>\n      }\n    </div>\n    <app-button (click)=\"addRecordGym()\" label=\"Add new record\" [disabled]=\"newGymRecord.invalid\" />\n  </div>\n  } }\n</div>"
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-36e0aa062141ed47dbd2936a57d77fd1bb974935655e27362069fc06ddda0f5847d6c6c71a4ad3f9e52f5769ac55dc120ade7979807e7ba9fd293400618ee4f0",
            "file": "src/app/components/elements/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pagination",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'purple'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "maxPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nextPage",
                    "defaultValue": "new EventEmitter<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "prevPage",
                    "defaultValue": "new EventEmitter<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-pagination',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './pagination.component.html',\n  styleUrl: './pagination.component.scss',\n})\nexport class PaginationComponent {\n  @Input() currentPage = 0;\n  @Input() maxPage = 0;\n  @Input() color = 'purple';\n  @Output() nextPage = new EventEmitter<boolean>(true);\n  @Output() prevPage = new EventEmitter<boolean>(true);\n\n  public get buttonClass(): string[] {\n    return [`button-${this.color}`];\n  }\n  public get numberClass(): string[] {\n    return [`number-${this.color}`];\n  }\n}\n",
            "styleUrl": "./pagination.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "buttonClass": {
                    "name": "buttonClass",
                    "getSignature": {
                        "name": "buttonClass",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 18
                    }
                },
                "numberClass": {
                    "name": "numberClass",
                    "getSignature": {
                        "name": "numberClass",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 21
                    }
                }
            },
            "templateData": "<div class=\"pagination-component\">\n  <div (click)=\"prevPage.emit(true)\" class=\"pagination-component-button\" [ngClass]=\"currentPage === 1 ? 'disabled' : buttonClass\"><</div>\n  <div class=\"pagination-component-number\" [ngClass]=\"numberClass\">{{currentPage}} / {{maxPage}}</div>\n  <div (click)=\"nextPage.emit(true)\" class=\"pagination-component-button\" [ngClass]=\"currentPage === maxPage ? 'disabled' : buttonClass\">></div>\n</div>\n"
        },
        {
            "name": "PrHistoryPageComponent",
            "id": "component-PrHistoryPageComponent-6085219b64dc40b9cf394231d24f4605091ad5b45dfdf6da86aeae3b688d0c6f32c850618b79dcd8ab21b9122cf9dc38e0448170b528fd5b5542d2bd11591308",
            "file": "src/app/pages/pr-history-page/pr-history-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pr-history-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pr-history-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activityTypes",
                    "defaultValue": "activityTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "activityTypesColors",
                    "defaultValue": "activityTypesColors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "activityTypesSvg",
                    "defaultValue": "activityTypesSvg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "currentPageGym",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "enduranceRecords",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RunningAndCyclingRecordsDocuments[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "gymExcercisesColors",
                    "defaultValue": "gymExcercisesColors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "gymRecords",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GymRecordsDocuments[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "limitPagination",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "limitPaginationGym",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "loadingEndurance",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "loadingGym",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "maxPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "maxPageGym",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "offset",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "offsetGym",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "total",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "totalGym",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "getEnduranceMaxPagination",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getGymMaxPagination",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserEnduranceRecordsPagination",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserGymRecordsPagination",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextPageEndurance",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nextPageGym",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prevPageEndurance",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prevPageGym",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CardComponent",
                    "type": "component"
                },
                {
                    "name": "SpinnerComponent",
                    "type": "component"
                },
                {
                    "name": "PaginationComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AppwriteDbService } from '../../services/appwrite-db.service';\nimport { AuthService } from '../../services/auth-service';\nimport {\n  GymRecordsDocuments,\n  RunningAndCyclingRecordsDocuments,\n  User,\n} from '../../services/interfaces/appwrite-db.interfaces';\nimport { CardComponent } from '../../components/elements/card/card.component';\nimport {\n  activityTypes,\n  activityTypesColors,\n  activityTypesSvg,\n  gymExcercisesColors,\n} from '../../data/record-data';\nimport { SpinnerComponent } from '../../components/spinner/spinner.component';\nimport { PaginationComponent } from '../../components/elements/pagination/pagination.component';\n\n@Component({\n  selector: 'app-pr-history-page',\n  standalone: true,\n  imports: [\n    CardComponent,\n    SpinnerComponent,\n    PaginationComponent,\n  ],\n  templateUrl: './pr-history-page.component.html',\n  styleUrl: './pr-history-page.component.scss',\n})\nexport class PrHistoryPageComponent {\n  user?: User;\n  activityTypes = activityTypes;\n  activityTypesSvg = activityTypesSvg;\n  activityTypesColors = activityTypesColors;\n  gymExcercisesColors = gymExcercisesColors;\n\n  constructor(\n    private appWriteDbService: AppwriteDbService,\n    private authService: AuthService\n  ) {\n    this.authService.loggedInUser$.subscribe((user) => {\n      this.user = user;\n    });\n    this.getGymMaxPagination();\n    this.getEnduranceMaxPagination();\n    this.getUserEnduranceRecordsPagination(this.limitPagination, this.offset);\n    this.getUserGymRecordsPagination(this.limitPaginationGym, this.offsetGym);\n  }\n\n  //endurance\n  loadingEndurance = false;\n  limitPagination = 5;\n  offset = 0;\n  total = 0;\n  maxPage = 0;\n  currentPage = 1;\n  enduranceRecords: RunningAndCyclingRecordsDocuments[] = [];\n  getEnduranceMaxPagination() {\n    this.appWriteDbService.getUserRecordsLength(this.user!.$id).subscribe({\n      next: (response) => {\n        if (response) {\n          this.total = response.total;\n          this.maxPage = Math.ceil(this.total / this.limitPagination);\n        }\n      },\n      error: (error) => {\n        console.error(error);\n      },\n      complete: () => {},\n    });\n  }\n\n  getUserEnduranceRecordsPagination(limit: number, offset: number) {\n    this.loadingEndurance = true;\n    this.appWriteDbService\n      .getUserRecordsPagination(this.user!.$id, limit, offset)\n      .subscribe({\n        next: (response) => {\n          this.enduranceRecords = response;\n        },\n        error: (error) => {\n          console.error(error);\n        },\n        complete: () => {\n          this.loadingEndurance = false;\n        },\n      });\n  }\n\n  nextPageEndurance() {\n    if (this.currentPage === this.maxPage) {\n    } else {\n      this.offset += this.limitPagination;\n      this.currentPage += 1;\n      this.getUserEnduranceRecordsPagination(this.limitPagination, this.offset);\n    }\n  }\n\n  prevPageEndurance() {\n    if (this.currentPage === 1) {\n    } else {\n      this.offset -= this.limitPagination;\n      this.currentPage -= 1;\n      this.getUserEnduranceRecordsPagination(this.limitPagination, this.offset);\n    }\n  }\n\n  //endurance\n\n  //gym\n  loadingGym = false;\n  limitPaginationGym = 5;\n  offsetGym = 0;\n  totalGym = 0;\n  maxPageGym = 0;\n  currentPageGym = 1;\n  gymRecords: GymRecordsDocuments[] = [];\n\n  getGymMaxPagination() {\n    this.appWriteDbService.getUserGymRecordsLength(this.user!.$id).subscribe({\n      next: (response) => {\n        if (response) {\n          this.totalGym = response.total;\n          this.maxPageGym = Math.ceil(this.totalGym / this.limitPaginationGym);\n        }\n      },\n      error: (error) => {\n        console.error(error);\n      },\n      complete: () => {},\n    });\n  }\n\n  getUserGymRecordsPagination(limit: number, offset: number) {\n    this.loadingGym = true;\n    this.appWriteDbService\n      .getUserGymRecordsPagination(this.user!.$id, limit, offset)\n      .subscribe({\n        next: (response) => {\n          this.gymRecords = response;\n        },\n        error: (error) => {\n          console.error(error);\n        },\n        complete: () => {\n          this.loadingGym = false;\n        },\n      });\n  }\n\n  nextPageGym() {\n    if (this.currentPageGym === this.maxPageGym) {\n    } else {\n      this.offsetGym += this.limitPaginationGym;\n      this.currentPageGym += 1;\n      this.getUserGymRecordsPagination(this.limitPaginationGym, this.offsetGym);\n    }\n  }\n\n  prevPageGym() {\n    if (this.currentPageGym === 1) {\n    } else {\n      this.offsetGym -= this.limitPaginationGym;\n      this.currentPageGym -= 1;\n      this.getUserGymRecordsPagination(this.limitPaginationGym, this.offsetGym);\n    }\n  }\n  //gym\n\n}\n",
            "styleUrl": "./pr-history-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appWriteDbService",
                        "type": "AppwriteDbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "appWriteDbService",
                        "type": "AppwriteDbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"history-page-container\">\n  <div class=\"history-page-container-header\">\n    <div class=\"history-page-container-header-title\">\n      <h2 class=\"no-margin\">Your pr history</h2>\n    </div>\n  </div>\n  <div class=\"history-page-container-content\">\n    <h2>Endurance records</h2>\n    <div class=\"history-page-container-content-records\">\n      @if(!loadingEndurance){\n      @for(record of enduranceRecords; track $index){\n      <div class=\"card-margin\">\n        <app-card [title]=\"activityTypes[record.type] || ''\" size=\"mobile\" [description]=\"\n            'You recorded ' + record.distance + 'kms in ' + record.record_time\n          \" [svgContent]=\"activityTypesSvg[record.type]\" [color]=\"activityTypesColors[record.type] || ''\" />\n      </div>\n      }\n      }@else {\n      <app-spinner />\n      }\n    </div>\n    <div class=\"history-page-pagination\">\n      <app-pagination (nextPage)=\"nextPageEndurance()\" (prevPage)=\"prevPageEndurance()\" [currentPage]=\"currentPage\"\n        [maxPage]=\"maxPage\"/>\n    </div>\n    <h2>Gym records</h2>\n    <div class=\"history-page-container-content-records\">\n      @if(!loadingGym){\n      @for(record of gymRecords; track $index){\n      <div class=\"card-margin\">\n        <app-card [title]=\"record.body_part\" size=\"mobile\"\n          [description]=\"'You recorded ' + record.weight + ' kgs in ' + record.excercise + ' for ' + record.reps + ' reps/seconds'\"\n          [color]=\"gymExcercisesColors[record.body_part] || ''\"></app-card>\n      </div>\n      }\n      }@else {\n      <app-spinner />\n      }\n    </div>\n  </div>\n  <div class=\"history-page-pagination\">\n    <app-pagination (nextPage)=\"nextPageGym()\" (prevPage)=\"prevPageGym()\" [currentPage]=\"currentPageGym\"\n      [maxPage]=\"maxPageGym\"/>\n  </div>\n</div>"
        },
        {
            "name": "PrPageComponent",
            "id": "component-PrPageComponent-97062fbc1f28486c5bbedf2efc94e7c32d717fc0b3c94dced8e94ac51ce909a6b5374c8aa5e07f4f1f6de0bdff1eaf3984aeea6fffa79d1a967e917071afe61b",
            "file": "src/app/pages/pr-page/pr-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pr-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pr-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activityTypesColors",
                    "defaultValue": "activityTypesColors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "activityTypesSvg",
                    "defaultValue": "activityTypesSvg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "armsExcercisesArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GymRecordsDocuments[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "backExcercisesArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GymRecordsDocuments[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "bodyPart",
                    "defaultValue": "bodyPart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "bodyPartExcercises",
                    "defaultValue": "bodyPartExercises",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "chestExcercisesArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GymRecordsDocuments[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "coreExcercisesArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GymRecordsDocuments[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "cyclingDistances",
                    "defaultValue": "cyclingDistances",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "cyclingDistancesArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RunningAndCyclingRecordsDocuments[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "enduranceGroups",
                    "defaultValue": "[\n    { title: 'Running', data: this.runningDistancesArray },\n    { title: 'Cycling', data: this.cyclingDistancesArray },\n    { title: 'Swimming', data: this.swimmingDistancesArray },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "enduranceGroupsFor",
                    "defaultValue": "[\n    {\n      type: 1,\n      distances: this.runningDistances,\n      array: this.runningDistancesArray,\n    },\n    {\n      type: 2,\n      distances: this.cyclingDistances,\n      array: this.cyclingDistancesArray,\n    },\n    {\n      type: 3,\n      distances: this.swimmingDistances,\n      array: this.swimmingDistancesArray,\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "gymExcerciseGroupFor",
                    "defaultValue": "[\n    { part: this.bodyPartExcercises.Chest, array: this.chestExcercisesArray },\n    { part: this.bodyPartExcercises.Back, array: this.backExcercisesArray },\n    { part: this.bodyPartExcercises.Legs, array: this.legsExcercisesArray },\n    { part: this.bodyPartExcercises.Arms, array: this.armsExcercisesArray },\n    {\n      part: this.bodyPartExcercises.Shoulders,\n      array: this.shouldersExcercisesArray,\n    },\n    { part: this.bodyPartExcercises.Core, array: this.coreExcercisesArray },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "gymExcercisesColors",
                    "defaultValue": "gymExcercisesColors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "gymExerciseGroups",
                    "defaultValue": "[\n    { title: 'Chest', data: this.chestExcercisesArray },\n    { title: 'Back', data: this.backExcercisesArray },\n    { title: 'Legs', data: this.legsExcercisesArray },\n    { title: 'Arms', data: this.armsExcercisesArray },\n    { title: 'Shoulders', data: this.shouldersExcercisesArray },\n    { title: 'Core', data: this.coreExcercisesArray },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "legsExcercisesArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GymRecordsDocuments[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "loadingEndurance",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "loadingGym",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "runningDistances",
                    "defaultValue": "runningDistances",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "runningDistancesArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RunningAndCyclingRecordsDocuments[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "shouldersExcercisesArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GymRecordsDocuments[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "swimmingDistances",
                    "defaultValue": "swimmingDistances",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "swimmingDistancesArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RunningAndCyclingRecordsDocuments[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "enduranceRecordsPushArray",
                    "args": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "distances",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pushArray",
                            "type": "RunningAndCyclingRecordsDocuments[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "distances",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pushArray",
                            "type": "RunningAndCyclingRecordsDocuments[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserBestEnduranceRecord",
                    "args": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "array",
                            "type": "RunningAndCyclingRecordsDocuments[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "array",
                            "type": "RunningAndCyclingRecordsDocuments[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserBestGymRecord",
                    "args": [
                        {
                            "name": "excercise",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "array",
                            "type": "GymRecordsDocuments[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "excercise",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "array",
                            "type": "GymRecordsDocuments[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gymRecordsPushArray",
                    "args": [
                        {
                            "name": "bodyPart",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pushArray",
                            "type": "GymRecordsDocuments[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bodyPart",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pushArray",
                            "type": "GymRecordsDocuments[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "SpinnerComponent",
                    "type": "component"
                },
                {
                    "name": "CardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {\n  GymRecordsDocuments,\n  RunningAndCyclingRecordsDocuments,\n  User,\n} from '../../services/interfaces/appwrite-db.interfaces';\nimport { AuthService } from '../../services/auth-service';\nimport { AppwriteDbService } from '../../services/appwrite-db.service';\nimport {\n  bodyPart,\n  bodyPartExercises,\n  cyclingDistances,\n  runningDistances,\n  swimmingDistances,\n  activityTypesSvg,\n  activityTypesColors,\n  gymExcercisesColors,\n} from '../../data/record-data';\nimport { SpinnerComponent } from '../../components/spinner/spinner.component';\nimport { CardComponent } from '../../components/elements/card/card.component';\n\n@Component({\n  selector: 'app-pr-page',\n  standalone: true,\n  imports: [SpinnerComponent, CardComponent],\n  templateUrl: './pr-page.component.html',\n  styleUrl: './pr-page.component.scss',\n})\nexport class PrPageComponent {\n  user?: User;\n  runningDistances = runningDistances;\n  cyclingDistances = cyclingDistances;\n  swimmingDistances = swimmingDistances;\n  bodyPart = bodyPart;\n  bodyPartExcercises = bodyPartExercises;\n  activityTypesSvg = activityTypesSvg;\n  activityTypesColors = activityTypesColors;\n  gymExcercisesColors = gymExcercisesColors;\n  constructor(\n    private authService: AuthService,\n    private appWriteDbService: AppwriteDbService\n  ) {\n    this.authService.loggedInUser$.subscribe((user) => {\n      this.user = user;\n    });\n    if (this.user) {\n      for (let group of this.enduranceGroupsFor) {\n        this.enduranceRecordsPushArray(\n          group.type,\n          group.distances,\n          group.array\n        );\n      }\n      for (let group of this.gymExcerciseGroupFor) {\n        this.gymRecordsPushArray(group.part, group.array);\n      }\n    }\n  }\n\n  //endurance endurance endurance endurance endurance endurance\n  loadingEndurance = false;\n  runningDistancesArray: RunningAndCyclingRecordsDocuments[] = [];\n  cyclingDistancesArray: RunningAndCyclingRecordsDocuments[] = [];\n  swimmingDistancesArray: RunningAndCyclingRecordsDocuments[] = [];\n  enduranceGroups = [\n    { title: 'Running', data: this.runningDistancesArray },\n    { title: 'Cycling', data: this.cyclingDistancesArray },\n    { title: 'Swimming', data: this.swimmingDistancesArray },\n  ];\n  enduranceGroupsFor = [\n    {\n      type: 1,\n      distances: this.runningDistances,\n      array: this.runningDistancesArray,\n    },\n    {\n      type: 2,\n      distances: this.cyclingDistances,\n      array: this.cyclingDistancesArray,\n    },\n    {\n      type: 3,\n      distances: this.swimmingDistances,\n      array: this.swimmingDistancesArray,\n    },\n  ];\n\n  getUserBestEnduranceRecord(\n    type: number,\n    distance: number,\n    array: RunningAndCyclingRecordsDocuments[]\n  ) {\n    this.loadingEndurance = true;\n    this.appWriteDbService\n      .getBestTimeRecord(this.user!.$id, type, distance)\n      .subscribe({\n        next: (response) => {\n          if (response) {\n            array.push(response);\n          }\n          this.loadingEndurance = false;\n        },\n        error: (error) => {\n          console.error(error);\n        },\n      });\n  }\n\n  enduranceRecordsPushArray(\n    type: number,\n    distances: number[],\n    pushArray: RunningAndCyclingRecordsDocuments[]\n  ) {\n    for (let i = 0; i < runningDistances.length; i++) {\n      this.getUserBestEnduranceRecord(type, distances[i], pushArray);\n    }\n  }\n  //endurance endurance endurance endurance endurance endurance\n\n  //gym gym gym gym gym gym gym gym gym gym gym gym gym gym gym\n  loadingGym = false;\n  chestExcercisesArray: GymRecordsDocuments[] = [];\n  backExcercisesArray: GymRecordsDocuments[] = [];\n  legsExcercisesArray: GymRecordsDocuments[] = [];\n  shouldersExcercisesArray: GymRecordsDocuments[] = [];\n  armsExcercisesArray: GymRecordsDocuments[] = [];\n  coreExcercisesArray: GymRecordsDocuments[] = [];\n  gymExerciseGroups = [\n    { title: 'Chest', data: this.chestExcercisesArray },\n    { title: 'Back', data: this.backExcercisesArray },\n    { title: 'Legs', data: this.legsExcercisesArray },\n    { title: 'Arms', data: this.armsExcercisesArray },\n    { title: 'Shoulders', data: this.shouldersExcercisesArray },\n    { title: 'Core', data: this.coreExcercisesArray },\n  ];\n  gymExcerciseGroupFor = [\n    { part: this.bodyPartExcercises.Chest, array: this.chestExcercisesArray },\n    { part: this.bodyPartExcercises.Back, array: this.backExcercisesArray },\n    { part: this.bodyPartExcercises.Legs, array: this.legsExcercisesArray },\n    { part: this.bodyPartExcercises.Arms, array: this.armsExcercisesArray },\n    {\n      part: this.bodyPartExcercises.Shoulders,\n      array: this.shouldersExcercisesArray,\n    },\n    { part: this.bodyPartExcercises.Core, array: this.coreExcercisesArray },\n  ];\n\n  getUserBestGymRecord(excercise: string, array: GymRecordsDocuments[]) {\n    this.loadingGym = true;\n    this.appWriteDbService\n      .getBestGymRecord(this.user!.$id, excercise)\n      .subscribe({\n        next: (response) => {\n          if (response) {\n            array.push(response);\n          }\n          this.loadingGym = false;\n        },\n        error: (error) => {\n          console.error(error);\n        },\n      });\n  }\n\n  gymRecordsPushArray(bodyPart: string[], pushArray: GymRecordsDocuments[]) {\n    for (let i = 0; i < bodyPart.length; i++) {\n      this.getUserBestGymRecord(bodyPart[i], pushArray);\n    }\n  }\n  //gym gym gym gym gym gym gym gym gym gym gym gym gym gym gym\n}\n",
            "styleUrl": "./pr-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appWriteDbService",
                        "type": "AppwriteDbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appWriteDbService",
                        "type": "AppwriteDbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "@if(!loadingEndurance && !loadingGym){\n<h2>Endurance records</h2>\n@for(group of enduranceGroups; track $index){\n<h3>{{group.title}}</h3>\n@if(group.data.length === 0){\n<p>No records to show!</p>\n}\n@for(record of group.data; track $index){\n<div class=\"card\">\n    <app-card [title]=\"'Your PR in  ' + record.distance + 'km'\" [description]=\"record.record_time\" size=\"mobile\"\n        [svgContent]=\"activityTypesSvg[record.type]\"\n        [color]=\"activityTypesColors[record.type]\">{{record.distance}}-{{record.record_time}}</app-card>\n</div>\n}\n}\n<h2>Gym records</h2>\n@for(group of gymExerciseGroups; track $index){\n<h3>{{ group.title }}</h3>\n@if(group.data.length === 0){\n<p>No records to show!</p>\n}\n@for(record of group.data; track $index){\n@if(record !== null){\n<div class=\"card\">\n    <app-card [title]=\"'Your PR in ' + record.excercise\"\n        [description]=\"record.weight + ' kgs for ' + record.reps + ' reps/seconds.'\"\n        [color]=\"gymExcercisesColors[record.body_part] || ''\" size=\"mobile\"></app-card>\n</div>\n}\n}\n}\n}@else {\n<app-spinner />\n}"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-c23da1fb639958beaa6e2a93d7e409504ed3f80f43fab097701d15ba7fe83a1f0f357e715a899a48d00f4d802cd634117a1619e4a22936a6ec314c55c988a01b",
            "file": "src/app/components/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-spinner',\n  standalone: true,\n  imports: [],\n  templateUrl: './spinner.component.html',\n  styleUrl: './spinner.component.scss'\n})\nexport class SpinnerComponent {\n\n}\n",
            "styleUrl": "./spinner.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"spinner-overlay\">\n    <div class=\"spinner\"></div>\n</div>"
        },
        {
            "name": "StartingPageComponent",
            "id": "component-StartingPageComponent-c5b826cde2d34e12c6d8fba03e607e492af791c777ceb74f9729eb2fa7d42789e0186444ccde1fdf1c3cfed9e1bb940e9431cc36d2533c61c730bc087b306556",
            "file": "src/app/pages/starting-page/starting-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-starting-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./starting-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../../components/elements/button/button.component';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-starting-page',\n  standalone: true,\n  imports: [ButtonComponent],\n  templateUrl: './starting-page.component.html',\n  styleUrl: './starting-page.component.scss',\n})\nexport class StartingPageComponent {\n  constructor(private router: Router) {}\n\n  navigateToLogin() {\n    this.router.navigate(['/login']);\n  }\n}\n",
            "styleUrl": "./starting-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"starting-page-container\">\n    <div class=\"starting-page-container-top\">\n        <div class=\"starting-page-container-top-title\">\n            <h1>Welcome to PRBook!</h1>\n        </div>\n    </div>\n    <div class=\"starting-page-container-mid\">\n        <div class=\"starting-page-container-mid-left\">\n            <h2>Your progress, your motivation, your personal bests</h2>\n            <h3>Track your athletic achievements with ease:</h3>\n            <p style=\"display: flex;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                    fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                    class=\"icon icon-tabler icons-tabler-outline icon-tabler-barbell\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path d=\"M2 12h1\" />\n                    <path d=\"M6 8h-2a1 1 0 0 0 -1 1v6a1 1 0 0 0 1 1h2\" />\n                    <path d=\"M6 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n                    <path d=\"M9 12h6\" />\n                    <path d=\"M15 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n                    <path d=\"M18 8h2a1 1 0 0 1 1 1v6a1 1 0 0 1 -1 1h-2\" />\n                    <path d=\"M22 12h-1\" />\n                </svg><strong>Strength Records</strong> – Log your gym PRs and monitor your progress.</p>\n            <p style=\"display: flex;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                    fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                    class=\"icon icon-tabler icons-tabler-outline icon-tabler-run\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path d=\"M13 4m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n                    <path d=\"M4 17l5 1l.75 -1.5\" />\n                    <path d=\"M15 21l0 -4l-4 -3l1 -6\" />\n                    <path d=\"M7 12l0 -3l5 -1l3 3l3 1\" />\n                </svg><strong>Endurance Milestones</strong> – Record your best runs, rides, and swims.</p>\n            <p style=\"display: flex;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                    fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                    class=\"icon icon-tabler icons-tabler-outline icon-tabler-scale-outline\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path d=\"M3 3m0 4a4 4 0 0 1 4 -4h10a4 4 0 0 1 4 4v10a4 4 0 0 1 -4 4h-10a4 4 0 0 1 -4 -4z\" />\n                    <path\n                        d=\"M12 7c1.956 0 3.724 .802 5 2.095l-2.956 2.904a3 3 0 0 0 -2.038 -.799a3 3 0 0 0 -2.038 .798l-2.956 -2.903a6.979 6.979 0 0 1 5 -2.095z\" />\n                </svg><strong>Body Metrics</strong> – Keep track of your weight, muscle mass, and more.</p>\n            <p>Stay motivated, celebrate every success, and push your limits. Let’s achieve your goals together!\n            </p>\n            <app-button label=\"Get started now!\" size=\"large\" (onClick)=\"navigateToLogin()\"></app-button>\n        </div>\n        <div class=\"starting-page-container-mid-right\">\n            <img src=\"/assets/images/starting-page.png\" alt=\"Starting page image\">\n        </div>\n    </div>\n</div>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "account",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/appwrite.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Account(client)"
            },
            {
                "name": "activityTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/data/record-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<number, string>",
                "defaultValue": "{\n  1: 'Run',\n  2: 'Bike',\n  3: 'Swim',\n}"
            },
            {
                "name": "activityTypesColors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/data/record-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<number, string>",
                "defaultValue": "{\n  1: 'blue',\n  2: 'green',\n  3: 'red',\n}"
            },
            {
                "name": "activityTypesSvg",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/data/record-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<number, string>",
                "defaultValue": "{\n  1: '<svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-run\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M13 4m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /><path d=\"M4 17l5 1l.75 -1.5\" /><path d=\"M15 21l0 -4l-4 -3l1 -6\" /><path d=\"M7 12l0 -3l5 -1l3 3l3 1\" /></svg>',\n  2: '<svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-bike\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M5 18m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0\" /><path d=\"M19 18m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0\" /><path d=\"M12 19l0 -4l-3 -3l5 -4l2 3l3 0\" /><path d=\"M17 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /></svg>',\n  3: '<svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-swimming\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M16 9m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /><path d=\"M6 11l4 -2l3.5 3l-1.5 2\" /><path d=\"M3 16.75a2.4 2.4 0 0 0 1 .25a2.4 2.4 0 0 0 2 -1a2.4 2.4 0 0 1 2 -1a2.4 2.4 0 0 1 2 1a2.4 2.4 0 0 0 2 1a2.4 2.4 0 0 0 2 -1a2.4 2.4 0 0 1 2 -1a2.4 2.4 0 0 1 2 1a2.4 2.4 0 0 0 2 1a2.4 2.4 0 0 0 1 -.25\" /></svg>',\n}"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
            },
            {
                "name": "bodyPart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/data/record-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['Chest', 'Back', 'Legs', 'Shoulders', 'Arms', 'Core']"
            },
            {
                "name": "bodyPartExercises",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/data/record-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  Chest: [\n    'Bench Press',\n    'Incline Bench Press',\n    'Decline Bench Press',\n    'Dumbbell Fly',\n    'Chest Dips',\n    'Push-ups',\n    'Cable Crossover',\n    'Pec Deck Machine',\n  ],\n  Back: [\n    'Pull-ups',\n    'Lat Pulldown',\n    'Barbell Row',\n    'Dumbbell Row',\n    'Deadlift',\n    'Face Pulls',\n    'T-Bar Row',\n    'Seated Cable Row',\n  ],\n  Legs: [\n    'Squat',\n    'Leg Press',\n    'Lunges',\n    'Romanian Deadlift',\n    'Leg Curl',\n    'Leg Extension',\n    'Calf Raise',\n    'Bulgarian Split Squat',\n  ],\n  Shoulders: [\n    'Overhead Press',\n    'Dumbbell Shoulder Press',\n    'Arnold Press',\n    'Lateral Raises',\n    'Front Raises',\n    'Face Pulls',\n    'Reverse Fly',\n    'Shrugs',\n  ],\n  Arms: [\n    'Bicep Curl',\n    'Hammer Curl',\n    'Preacher Curl',\n    'Tricep Dips',\n    'Tricep Pushdown',\n    'Overhead Tricep Extension',\n    'Close-Grip Bench Press',\n    'Reverse Curl',\n  ],\n  Core: [\n    'Plank',\n    'Crunches',\n    'Russian Twists',\n    'Leg Raises',\n    'Hanging Leg Raises',\n    'Ab Rollout',\n    'Bicycle Crunches',\n    'Dead Bug',\n  ],\n}"
            },
            {
                "name": "client",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/appwrite.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Client()"
            },
            {
                "name": "cyclingDistances",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/data/record-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[10, 20, 40, 50, 90, 100, 160, 200]"
            },
            {
                "name": "gymExcercisesColors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/data/record-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<string, string>",
                "defaultValue": "{\n  Chest: 'blue',\n  Back: 'green',\n  Legs: 'red',\n  Shoulders: 'purple',\n  Arms: 'yellow',\n  Core: 'white',\n}"
            },
            {
                "name": "runningDistances",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/data/record-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[0.1, 0.4, 1, 2, 3, 5, 10, 15, 21, 42, 50, 100]"
            },
            {
                "name": "swimmingDistances",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/data/record-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[0.1, 0.2, 0.4, 0.8, 1.5, 3.8, 5, 10]"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "User",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/services/auth-service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/lib/appwrite.ts": [
                {
                    "name": "account",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/appwrite.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Account(client)"
                },
                {
                    "name": "client",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/appwrite.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Client()"
                }
            ],
            "src/app/data/record-data.ts": [
                {
                    "name": "activityTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/data/record-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<number, string>",
                    "defaultValue": "{\n  1: 'Run',\n  2: 'Bike',\n  3: 'Swim',\n}"
                },
                {
                    "name": "activityTypesColors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/data/record-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<number, string>",
                    "defaultValue": "{\n  1: 'blue',\n  2: 'green',\n  3: 'red',\n}"
                },
                {
                    "name": "activityTypesSvg",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/data/record-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<number, string>",
                    "defaultValue": "{\n  1: '<svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-run\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M13 4m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /><path d=\"M4 17l5 1l.75 -1.5\" /><path d=\"M15 21l0 -4l-4 -3l1 -6\" /><path d=\"M7 12l0 -3l5 -1l3 3l3 1\" /></svg>',\n  2: '<svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-bike\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M5 18m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0\" /><path d=\"M19 18m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0\" /><path d=\"M12 19l0 -4l-3 -3l5 -4l2 3l3 0\" /><path d=\"M17 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /></svg>',\n  3: '<svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-swimming\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M16 9m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /><path d=\"M6 11l4 -2l3.5 3l-1.5 2\" /><path d=\"M3 16.75a2.4 2.4 0 0 0 1 .25a2.4 2.4 0 0 0 2 -1a2.4 2.4 0 0 1 2 -1a2.4 2.4 0 0 1 2 1a2.4 2.4 0 0 0 2 1a2.4 2.4 0 0 0 2 -1a2.4 2.4 0 0 1 2 -1a2.4 2.4 0 0 1 2 1a2.4 2.4 0 0 0 2 1a2.4 2.4 0 0 0 1 -.25\" /></svg>',\n}"
                },
                {
                    "name": "bodyPart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/data/record-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['Chest', 'Back', 'Legs', 'Shoulders', 'Arms', 'Core']"
                },
                {
                    "name": "bodyPartExercises",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/data/record-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  Chest: [\n    'Bench Press',\n    'Incline Bench Press',\n    'Decline Bench Press',\n    'Dumbbell Fly',\n    'Chest Dips',\n    'Push-ups',\n    'Cable Crossover',\n    'Pec Deck Machine',\n  ],\n  Back: [\n    'Pull-ups',\n    'Lat Pulldown',\n    'Barbell Row',\n    'Dumbbell Row',\n    'Deadlift',\n    'Face Pulls',\n    'T-Bar Row',\n    'Seated Cable Row',\n  ],\n  Legs: [\n    'Squat',\n    'Leg Press',\n    'Lunges',\n    'Romanian Deadlift',\n    'Leg Curl',\n    'Leg Extension',\n    'Calf Raise',\n    'Bulgarian Split Squat',\n  ],\n  Shoulders: [\n    'Overhead Press',\n    'Dumbbell Shoulder Press',\n    'Arnold Press',\n    'Lateral Raises',\n    'Front Raises',\n    'Face Pulls',\n    'Reverse Fly',\n    'Shrugs',\n  ],\n  Arms: [\n    'Bicep Curl',\n    'Hammer Curl',\n    'Preacher Curl',\n    'Tricep Dips',\n    'Tricep Pushdown',\n    'Overhead Tricep Extension',\n    'Close-Grip Bench Press',\n    'Reverse Curl',\n  ],\n  Core: [\n    'Plank',\n    'Crunches',\n    'Russian Twists',\n    'Leg Raises',\n    'Hanging Leg Raises',\n    'Ab Rollout',\n    'Bicycle Crunches',\n    'Dead Bug',\n  ],\n}"
                },
                {
                    "name": "cyclingDistances",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/data/record-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[10, 20, 40, 50, 90, 100, 160, 200]"
                },
                {
                    "name": "gymExcercisesColors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/data/record-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string, string>",
                    "defaultValue": "{\n  Chest: 'blue',\n  Back: 'green',\n  Legs: 'red',\n  Shoulders: 'purple',\n  Arms: 'yellow',\n  Core: 'white',\n}"
                },
                {
                    "name": "runningDistances",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/data/record-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[0.1, 0.4, 1, 2, 3, 5, 10, 15, 21, 42, 50, 100]"
                },
                {
                    "name": "swimmingDistances",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/data/record-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[0.1, 0.2, 0.4, 0.8, 1.5, 3.8, 5, 10]"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/services/auth-service.ts": [
                {
                    "name": "User",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/services/auth-service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/elements/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/elements/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/elements/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data/record-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activityTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data/record-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activityTypesColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data/record-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activityTypesSvg",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data/record-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bodyPart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data/record-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bodyPartExercises",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data/record-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cyclingDistances",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data/record-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gymExcercisesColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data/record-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "runningDistances",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data/record-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "swimmingDistances",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/no-auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "NoAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home-page/home-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/new-record-page/new-record-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewRecordPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pr-history-page/pr-history-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PrHistoryPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pr-page/pr-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PrPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/starting-page/starting-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StartingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/appwrite-db.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppwriteDbService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth-service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interfaces/appwrite-db.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GymRecords",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interfaces/appwrite-db.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GymRecordsDocuments",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interfaces/appwrite-db.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RunningAndCyclingRecords",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interfaces/appwrite-db.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RunningAndCyclingRecordsDocuments",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interfaces/appwrite-db.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Target",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interfaces/appwrite-db.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/lib/appwrite.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "account",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/appwrite.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "client",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}