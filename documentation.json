{
    "pipes": [],
    "interfaces": [
        {
            "name": "RunningAndCyclingRecords",
            "id": "interface-RunningAndCyclingRecords-61cbe915843d2ec9719c8bce0e71da3981ba71411874ec122884b1511fa95ab4fda606972897893ee1ded8bf027636457b4cfafc76b285cb3264f706e173a60d",
            "file": "src/app/services/interfaces/appwrite-db.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RunningAndCyclingRecords {\n  total: number;\n  documents: Array<RunningAndCyclingRecordsDocuments>;\n}\n\nexport interface RunningAndCyclingRecordsDocuments {\n  user_id: string;\n  distance: number;\n  record_time: string;\n  is_running: boolean;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n",
            "properties": [
                {
                    "name": "documents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<RunningAndCyclingRecordsDocuments>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RunningAndCyclingRecordsDocuments",
            "id": "interface-RunningAndCyclingRecordsDocuments-61cbe915843d2ec9719c8bce0e71da3981ba71411874ec122884b1511fa95ab4fda606972897893ee1ded8bf027636457b4cfafc76b285cb3264f706e173a60d",
            "file": "src/app/services/interfaces/appwrite-db.interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RunningAndCyclingRecords {\n  total: number;\n  documents: Array<RunningAndCyclingRecordsDocuments>;\n}\n\nexport interface RunningAndCyclingRecordsDocuments {\n  user_id: string;\n  distance: number;\n  record_time: string;\n  is_running: boolean;\n  $id: string;\n  $createdAt: string;\n  $updatedAt: string;\n  $permissions: any[];\n  $databaseId: string;\n  $collectionId: string;\n}\n",
            "properties": [
                {
                    "name": "$collectionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "$createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "$databaseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "$id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "$permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "$updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "distance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "is_running",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "record_time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AppwriteDbService",
            "id": "injectable-AppwriteDbService-7ea7cec482267e15379eef4288f5a8fd0479d2a879e25d611b6acba4ab5b5f5175dd5d2bdf72d4323f64e8fdee65d27f15b081b6138a7d8e7abcbc3314fa77f6",
            "file": "src/app/services/appwrite-db.service.ts",
            "properties": [
                {
                    "name": "database",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Databases",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "databaseId",
                    "defaultValue": "environment.databaseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "runningAndCyclingRecordsId",
                    "defaultValue": "environment.runningAndCyclingRecordsId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createRunningAndCyclingRecord",
                    "args": [
                        {
                            "name": "user_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "record_time",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "is_running",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<RunningAndCyclingRecordsDocuments | null>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "user_id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "record_time",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "is_running",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllRunningAndCyclingRecords",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<RunningAndCyclingRecordsDocuments[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Databases, Query } from 'appwrite';\nimport { client } from '../../lib/appwrite';\nimport { environment } from '../../../environment';\nimport { RunningAndCyclingRecordsDocuments } from './interfaces/appwrite-db.interfaces';\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppwriteDbService {\n  private database: Databases;\n  private databaseId = environment.databaseId;\n  private runningAndCyclingRecordsId = environment.runningAndCyclingRecordsId;\n\n  constructor() {\n    this.database = new Databases(client);\n  }\n\n  //get get get get get get get get get get get get get get get get\n\n  async getAllRunningAndCyclingRecords(\n    userId: string\n  ): Promise<RunningAndCyclingRecordsDocuments[]> {\n    if (userId) {\n      try {\n        const response = await this.database.listDocuments(\n          this.databaseId,\n          this.runningAndCyclingRecordsId,\n          [Query.equal('user_id', userId)]\n        );\n        console.log(response);\n        return response.documents as RunningAndCyclingRecordsDocuments[];\n      } catch (error) {\n        console.error('Failed loading records:', error);\n        return [];\n      }\n    } else {\n      return [];\n    }\n  }\n\n  //get get get get get get get get get get get get get get get get\n\n  //create create create create create create create create create\n\n  async createRunningAndCyclingRecord(\n    user_id: string,\n    distance: number,\n    record_time: string,\n    is_running: boolean\n  ): Promise<RunningAndCyclingRecordsDocuments | null> {\n    try {\n      const response = await this.database.createDocument(\n        this.databaseId,\n        this.runningAndCyclingRecordsId,\n        'unique()',\n        {\n          user_id,\n          distance,\n          record_time,\n          is_running,\n        }\n      );\n      console.log('Document created:', response);\n      return response as RunningAndCyclingRecordsDocuments;\n    } catch (error) {\n      console.error('Failed to create record:', error);\n      return null;\n    }\n  }\n\n  //create create create create create create create create create\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-c7c1dfa05f1bda5c49edbbaf91a2b8174227db980e21f00c15b9aad438a27a19ba7094f7337e76b5688778792c5842f0ea198cf3921d66f80a722b9f554766f8",
            "file": "src/app/services/auth-service.ts",
            "properties": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSessionChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loggedInUser$",
                    "defaultValue": "this.loggedInUserSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "loggedInUserSubject",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkCurrentSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ID, Account } from 'appwrite';\nimport { client } from '../../lib/appwrite';\nimport { Router } from '@angular/router';\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private account: Account;\n  private loggedInUserSubject = new BehaviorSubject<any>(null);\n  loggedInUser$ = this.loggedInUserSubject.asObservable();\n  constructor(private router: Router) {\n    this.account = new Account(client);\n    this.checkCurrentSession();\n  }\n\n  async login(email: string, password: string) {\n    await this.account.createEmailPasswordSession(email, password);\n    const user = await this.account.get();\n    this.loggedInUserSubject.next(user);\n  }\n\n  async register(email: string, password: string, name: string) {\n    try {\n      await this.account.create(ID.unique(), email, password, name);\n      return this.login(email, password);\n    } catch (error) {\n      console.error('Registration failed: ', error);\n      throw error;\n    }\n  }\n\n  async logout() {\n    try {\n      await this.account.deleteSession('current');\n      this.loggedInUserSubject.next(null);\n      this.router.navigate(['/welcome']);\n    } catch (error) {\n      console.error('Loggout failed: ', error);\n      throw error;\n    }\n  }\n\n  private isSessionChecked = false;\n  async checkCurrentSession(): Promise<void> {\n    if (this.isSessionChecked) return;\n    try {\n      const user = await this.account.get();\n      // console.log('User found:', user);\n      this.loggedInUserSubject.next(user);\n    } catch (error) {\n      console.warn('No active session');\n      this.loggedInUserSubject.next(null);\n    } finally {\n      this.isSessionChecked = true;\n    }\n  }\n}\n\nexport type User = {\n  email: string;\n  password: string;\n  name: string;\n};\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-5a16b91c1adae468f9da34cecb92a790b5fe4c8c1ee4d1e6c7dffb6b9b323bd076a52c35010be426331314e35f852c06d0c8e160ca0333927b4150b397b58025",
            "file": "src/app/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable, from } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { AuthService } from './services/auth-service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): Observable<boolean> {\n    return from(this.authService.checkCurrentSession()).pipe(\n      switchMap(() => this.authService.loggedInUser$),\n      map((user) => {\n        if (user) {\n          return true;\n        } else {\n          this.router.navigate(['/login']);\n          return false;\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        },
        {
            "name": "NoAuthGuard",
            "id": "injectable-NoAuthGuard-f86f1274466355b7d5afb0cd2d18b65600c7b720da5d43cccc5d43ea7ab3b5b044a8b3e4d265a231bad493771bcfe960853e82270bcc35c027ba9d6992684391",
            "file": "src/app/no-auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable, from } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { AuthService } from './services/auth-service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NoAuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): Observable<boolean> {\n    return from(this.authService.checkCurrentSession()).pipe(\n      switchMap(() => this.authService.loggedInUser$),\n      map((user) => {\n        if (user) {\n          this.router.navigate(['/home']);\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-37a155828f9202edf95dbca535f90e1b5da1dad157d02af8fa953ac3b403261b3e700676992315caa8f7bd9937a5d301598c033a45aedd227fa784588bf9775b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'PRBook'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { HeaderComponent } from './components/header/header.component';\nimport { FooterComponent } from './components/footer/footer.component';\n// import { ButtonComponent } from './components/elements/button/button.component';\n// import { CardComponent } from './components/elements/card/card.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, HeaderComponent, FooterComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'PRBook';\n\n  // clickFunction(event: Event) {\n  //   console.log('xd', event);\n  // }\n  // svg = `<svg  xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-abacus\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M5 3v18\" /><path d=\"M19 21v-18\" /><path d=\"M5 7h14\" /><path d=\"M5 15h14\" /><path d=\"M8 13v4\" /><path d=\"M11 13v4\" /><path d=\"M16 13v4\" /><path d=\"M14 5v4\" /><path d=\"M11 5v4\" /><path d=\"M8 5v4\" /><path d=\"M3 21h18\" /></svg>`\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- <app-button [label]=\"'Click me'\" size=\"medium\" (onClick)=\"clickFunction($event)\"></app-button>\n<app-card title=\"Testowy tytuł\" description=\"Testowe description bardzo dlugie\" [svgContent]=\"svg\"></app-card> -->\n\n<app-header />\n<div class=\"main-container\">\n    <div class=\"route-container\">\n        <router-outlet />\n    </div>\n</div>\n<app-footer />"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-20bd756abfd93660b699b9aa1b1cb334f46169f875d0bcc7a9afc60f005a2ce7647a8ce7926e2d1dfdba00cc473743d1dee2a8e9ac26a7c0e0e1bd7912e382ca",
            "file": "src/app/components/elements/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateButtonSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './button.component.html',\n  styleUrl: './button.component.scss',\n})\nexport class ButtonComponent {\n  @Input() disabled: boolean = false;\n  @Input() label: string = 'Button';\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n  @Output() onClick = new EventEmitter<Event>();\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event: any) {\n    this.updateButtonSize();\n  }\n\n  ngOnInit() {\n    this.updateButtonSize();\n  }\n\n  updateButtonSize() {\n    if (window.innerWidth <= 768) {\n      this.size = 'small';\n    } else if (window.innerWidth <= 1024) {\n      this.size = 'medium';\n    } else {\n      this.size = 'large';\n    }\n  }\n\n  public get classes(): string[] {\n    const mode = !this.disabled ? 'button-active' : 'button-disabled';\n    return ['button', mode, this.size];\n  }\n}\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 42
                    }
                }
            },
            "templateData": "<button type=\"button\" [ngClass]=\"classes\" (click)=\"onClick.emit($event)\">\n    <p>{{label}}</p>\n</button>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-decc551bb72e1c8d61e29912eb4108810b1de467974aca140fb8ec516862fb78115d02c139eefa6d493fd0900b714a947e0a540d04028475af1e00e7e25f7dd0",
            "file": "src/app/components/elements/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "defaultValue": "'Example description!'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'desktop'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"desktop\" | \"mobile\"",
                    "decorators": []
                },
                {
                    "name": "svgContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_svgContent",
                    "defaultValue": "`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\"\n            stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M2 12h1\" />\n            <path d=\"M6 8h-2a1 1 0 0 0 -1 1v6a1 1 0 0 0 1 1h2\" />\n            <path d=\"M6 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n            <path d=\"M9 12h6\" />\n            <path d=\"M15 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n            <path d=\"M18 8h2a1 1 0 0 1 1 1v6a1 1 0 0 1 -1 1h-2\" />\n            <path d=\"M22 12h-1\" />\n        </svg>`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "safeSvgContent",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SafeHtml",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-card',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './card.component.html',\n  styleUrl: './card.component.scss',\n})\nexport class CardComponent {\n  @Input() size: 'desktop' | 'mobile' = 'desktop';\n  @Input() title: string = 'Title';\n  @Input() description: string = 'Example description!';\n  @Output() onClick = new EventEmitter<Event>();\n  @Input() set svgContent(content: string) {\n    this._svgContent = content || this._svgContent;\n    this.safeSvgContent = this.sanitizer.bypassSecurityTrustHtml(content);\n  }\n\n  private _svgContent: string = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\"\n            stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon\">\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n            <path d=\"M2 12h1\" />\n            <path d=\"M6 8h-2a1 1 0 0 0 -1 1v6a1 1 0 0 0 1 1h2\" />\n            <path d=\"M6 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n            <path d=\"M9 12h6\" />\n            <path d=\"M15 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n            <path d=\"M18 8h2a1 1 0 0 1 1 1v6a1 1 0 0 1 -1 1h-2\" />\n            <path d=\"M22 12h-1\" />\n        </svg>`;\n  safeSvgContent: SafeHtml = '';\n  \n  constructor(private sanitizer: DomSanitizer) {\n    this.safeSvgContent = this.sanitizer.bypassSecurityTrustHtml(this._svgContent);\n  }\n\n  get svgContent(): string {\n    return this._svgContent;\n  }\n\n  public get classes(): string[] {\n    const mode = this.size === 'desktop' ? 'card-desktop' : 'card-mobile';\n    return ['card', mode];\n  }\n}\n",
            "styleUrl": "./card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "svgContent": {
                    "name": "svgContent",
                    "setSignature": {
                        "name": "svgContent",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "content",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "content",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "svgContent",
                        "type": "string",
                        "returnType": "string",
                        "line": 39
                    }
                },
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            },
            "templateData": "<div [ngClass]=\"classes\" (click)=\"onClick.emit($event)\">\n    <div class=\"card-image\">\n        <div class=\"svg-container\" [innerHTML]=\"safeSvgContent\"></div>\n    </div>\n    <div class=\"card-text\">\n        <div class=\"card-text-title\">\n            <h3>{{title}}</h3>\n        </div>\n        <div class=\"card-text-description\">\n            <p>{{description}}</p>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-8a60337cd99521c7582c2a72c84db07777cc4769e848fd04b47a2e0271da9c95164593ad36dab9db1ee343bdc5c1e938ce8fbb3c6d2d2aa468edd1d3aa2edf10",
            "file": "src/app/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  standalone: true,\n  imports: [],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss'\n})\nexport class FooterComponent {\n\n}\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<footer>\n    <div class=\"footer-container\">\n        <div>\n            <p>PRBook 2025</p>\n        </div>\n        <div class=\"footer-container-links\">\n            <div class=\"link\">\n                Github\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                    stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                    class=\"icon icon-tabler icons-tabler-outline icon-tabler-brand-github\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path\n                        d=\"M9 19c-4.3 1.4 -4.3 -2.5 -6 -3m12 5v-3.5c0 -1 .1 -1.4 -.5 -2c2.8 -.3 5.5 -1.4 5.5 -6a4.6 4.6 0 0 0 -1.3 -3.2a4.2 4.2 0 0 0 -.1 -3.2s-1.1 -.3 -3.5 1.3a12.3 12.3 0 0 0 -6.2 0c-2.4 -1.6 -3.5 -1.3 -3.5 -1.3a4.2 4.2 0 0 0 -.1 3.2a4.6 4.6 0 0 0 -1.3 3.2c0 4.6 2.7 5.7 5.5 6c-.6 .6 -.6 1.2 -.5 2v3.5\" />\n                </svg>\n            </div>\n            <div class=\"link\">\n                Linkedin\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                    stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                    class=\"icon icon-tabler icons-tabler-outline icon-tabler-brand-linkedin\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path d=\"M8 11v5\" />\n                    <path d=\"M8 8v.01\" />\n                    <path d=\"M12 16v-5\" />\n                    <path d=\"M16 16v-3a2 2 0 1 0 -4 0\" />\n                    <path d=\"M3 7a4 4 0 0 1 4 -4h10a4 4 0 0 1 4 4v10a4 4 0 0 1 -4 4h-10a4 4 0 0 1 -4 -4z\" />\n                </svg>\n            </div>\n        </div>\n    </div>\n</footer>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-70835de299e98286bc4f1c66dec9ed28379cfd90df2f9ebe5f45900bcd6b763466446242a40dbeeb6d1d5232473e57d7ae603f810a6b72ab585d7643a144feda",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "route",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../elements/button/button.component';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter, Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth-service';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [ButtonComponent],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n})\nexport class HeaderComponent {\n  route: string = '';\n  isLoggedIn = false;\n  private authSubscription: Subscription | undefined;\n\n  constructor(private router: Router, private authService: AuthService) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationEnd))\n      .subscribe((event) => {\n        this.route = event.url;\n      });\n  }\n\n  ngOnInit() {\n    this.authSubscription = this.authService.loggedInUser$.subscribe((user) => {\n      this.isLoggedIn = !!user;\n    });\n  }\n\n  ngOnDestroy() {\n    this.authSubscription?.unsubscribe();\n  }\n\n  navigateTo(route: string) {\n    this.router.navigate([route]);\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n}\n",
            "styleUrl": "./header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<header>\n    <div class=\"header-container\">\n        <div class=\"header-left\">\n            <img src=\"/assets/images/logo.png\" alt=\"PRBook logo\" class=\"header-logo\">\n            <h1>PRBook</h1>\n            <nav class=\"header-left-nav\">\n                @if(isLoggedIn){\n                <p (click)=\"navigateTo('/home')\">Home</p>\n                <p (click)=\"navigateTo('/history')\">PR History</p>\n                }@else {\n                <p (click)=\"navigateTo('/welcome')\">Home</p>\n                }\n            </nav>\n        </div>\n        @if(isLoggedIn){\n        <div class=\"header-right\">\n            <app-button label=\"Logout\" (onClick)=\"logout()\" />\n        </div>\n        }@else if (this.route !== '/login') {\n        <div class=\"header-right\">\n            <app-button label=\"Get started\" (onClick)=\"navigateTo('/login')\" />\n        </div>\n        }\n\n    </div>\n</header>"
        },
        {
            "name": "HomePageComponent",
            "id": "component-HomePageComponent-a7ea6bc63c9fc0860ec3f892f1fe4bf197486a3e10130f1ddb7972242d339ab3330de18a2710a4c87031b9b577cb4eadeec42c783d28e296085877209af5acd3",
            "file": "src/app/pages/home-page/home-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bike",
                    "defaultValue": "'<svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-bike\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M5 18m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0\" /><path d=\"M19 18m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0\" /><path d=\"M12 19l0 -4l-3 -3l5 -4l2 3l3 0\" /><path d=\"M17 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /></svg>'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isMobile",
                    "defaultValue": "window.innerWidth <= 768",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loadedRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RunningAndCyclingRecords | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "runner",
                    "defaultValue": "'<svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-run\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M13 4m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /><path d=\"M4 17l5 1l.75 -1.5\" /><path d=\"M15 21l0 -4l-4 -3l1 -6\" /><path d=\"M7 12l0 -3l5 -1l3 3l3 1\" /></svg>'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "addRecord",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadRecords",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener } from '@angular/core';\nimport { AppwriteDbService } from '../../services/appwrite-db.service';\nimport { AuthService } from '../../services/auth-service';\nimport { CardComponent } from '../../components/elements/card/card.component';\nimport { RunningAndCyclingRecords } from '../../services/interfaces/appwrite-db.interfaces';\n\n@Component({\n  selector: 'app-home-page',\n  standalone: true,\n  imports: [CardComponent],\n  templateUrl: './home-page.component.html',\n  styleUrl: './home-page.component.scss',\n})\nexport class HomePageComponent {\n  constructor(\n    private AppwriteDbService: AppwriteDbService,\n    private authService: AuthService\n  ) {}\n\n  isMobile: boolean = window.innerWidth <= 768;\n\n  @HostListener('window:resize', ['$event'])\n  onResize() {\n    this.isMobile = window.innerWidth <= 768;\n  }\n\n  runner =\n    '<svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-run\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M13 4m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /><path d=\"M4 17l5 1l.75 -1.5\" /><path d=\"M15 21l0 -4l-4 -3l1 -6\" /><path d=\"M7 12l0 -3l5 -1l3 3l3 1\" /></svg>';\n  bike =\n    '<svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-bike\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M5 18m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0\" /><path d=\"M19 18m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0\" /><path d=\"M12 19l0 -4l-3 -3l5 -4l2 3l3 0\" /><path d=\"M17 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /></svg>';\n  user: any;\n  ngOnInit() {\n    this.authService.loggedInUser$.subscribe((user) => {\n      this.user = user;\n      this.loadRecords(this.user.$id);\n    });\n  }\n\n  loadedRecords: RunningAndCyclingRecords | undefined;\n  loadRecords(id: string) {\n    this.AppwriteDbService.getAllRunningAndCyclingRecords(id)\n      .then((documents) => {\n        this.loadedRecords = {\n          total: documents.length,\n          documents: documents,\n        };\n      })\n      .catch((error) => {\n        console.error('Failed to load records:', error);\n      });\n  }\n\n  addRecord() {\n    this.AppwriteDbService.createRunningAndCyclingRecord(\n      this.user.$id,\n      40,\n      '00:01:05',\n      false\n    );\n  }\n}\n",
            "styleUrl": "./home-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "AppwriteDbService",
                        "type": "AppwriteDbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "AppwriteDbService",
                        "type": "AppwriteDbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<!-- <p>home-page works!</p>\n<button (click)=\"addRecord()\">Add record</button> -->\n<div class=\"home-page-container\">\n    @if(loadedRecords!.total > 0){\n    <div>\n        <h2>Your last recorded PR</h2>\n        @if(loadedRecords!.documents[loadedRecords!.total-1].is_running){\n        <app-card\n            [title]=\"'Congratulation ' + loadedRecords!.documents[loadedRecords!.total - 1]!.distance + 'km' + ' record'\"\n            [description]=\"loadedRecords!.documents[loadedRecords!.total - 1]!.record_time\" [svgContent]=\"runner\"\n            [size]=\"isMobile ? 'mobile': 'desktop'\"></app-card>\n        }@else {\n        <app-card\n            [title]=\"'Congratulation ' + loadedRecords!.documents[loadedRecords!.total - 1]!.distance + 'km' + ' record'\"\n            [description]=\"loadedRecords!.documents[loadedRecords!.total - 1]!.record_time\" [svgContent]=\"bike\"\n            [size]=\"isMobile ? 'mobile': 'desktop'\"></app-card>\n        }\n    </div>\n    }\n    <div class=\"home-page-add-container\">\n        <h2>Add new record</h2>\n        <div class=\"home-page-add-container-cards\">\n            <div class=\"card-1\">\n                <app-card title=\"New running record!\" description=\"That was pretty fast!\" [svgContent]=\"runner\"\n                    [size]=\"isMobile ? 'mobile': 'desktop'\"></app-card>\n            </div>\n            <div class=\"card-2\">\n                <app-card title=\"New bikeing record!\" description=\"Great job!\" [svgContent]=\"bike\"\n                    [size]=\"isMobile ? 'mobile': 'desktop'\"></app-card>\n            </div>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-ca33ccdb9508807d44ed0501d405a03406a4ee622e9eb41b4060864d73b5bc08a179042d8cf41a38cdab23bd4b766c58a3f7833511ed3d3ecbbb892b7df9eb38",
            "file": "src/app/pages/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "errorMessageLogin",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "forgot",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "register",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "registerForm",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n    confirmPassword: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n    name: new FormControl('', [Validators.required, Validators.minLength(3)]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateToHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../../components/elements/button/button.component';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth-service';\nimport {\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-login-page',\n  standalone: true,\n  imports: [ButtonComponent, ReactiveFormsModule],\n  templateUrl: './login-page.component.html',\n  styleUrl: './login-page.component.scss',\n})\nexport class LoginPageComponent {\n  register: boolean = false;\n  forgot: boolean = false;\n  loading: boolean = false;\n  error: string = '';\n  message: string = '';\n  registerForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n    confirmPassword: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n    name: new FormControl('', [Validators.required, Validators.minLength(3)]),\n  });\n\n  loginForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n    ]),\n  });\n\n  constructor(private router: Router, private authService: AuthService) {}\n  errorMessageLogin: string = '';\n  sendLogin() {\n    this.loading = true;\n    setTimeout(() => {\n      this.authService\n        .login(this.loginForm.value.email!, this.loginForm.value.password!)\n        .then(() => {\n          this.loading = false;\n          this.router.navigate(['/home']);\n          console.log('Successfully logged in!');\n        })\n        .catch((error) => {\n          this.loading = false;\n          this.errorMessageLogin = error;\n          console.error('Something went wrong during login: ', error);\n        });\n    }, 1000);\n  }\n\n  sendRegister() {\n    this.loading = true;\n    if (\n      this.registerForm.value.password ===\n        this.registerForm.value.confirmPassword &&\n      this.registerForm.valid\n    ) {\n      setTimeout(() => {\n        this.authService\n          .register(\n            this.registerForm.value.email!,\n            this.registerForm.value.password!,\n            this.registerForm.value.name!\n          )\n          .then(() => {\n            this.loading = false;\n            setTimeout(() => {\n              this.message = 'Sucessfully registered!';\n            }, 1000);\n            this.router.navigate(['/home']);\n            console.log('Successfully registered!');\n          })\n          .catch((error) => {\n            this.loading = false;\n            console.error('Something went wrong during registration: ', error);\n          });\n      }, 2000);\n    } else {\n      this.loading = false;\n      this.error = 'Please fix the errors before submitting.';\n      return;\n    }\n  }\n\n  sendLogout() {\n    this.authService.logout();\n  }\n\n  navigateToHome() {\n    console.log('home');\n    this.router.navigate(['/home']);\n  }\n}\n",
            "styleUrl": "./login-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"login-page-container\">\n    @if(!loading){\n    @if(!register && !forgot){\n    <div class=\"login-page-container-form-login\" [formGroup]=\"loginForm\">\n        <h3>Login to PRBook!</h3>\n        <div class=\"login-page-container-form-login-input\">\n            <p>Email</p>\n            <input type=\"text\" placeholder=\"Enter you email\" class=\"input\" formControlName=\"email\" />\n            @if (loginForm.get('email')?.invalid && loginForm.get('email')?.touched) {\n            <p class=\"red\">\n                @if (loginForm.get('email')?.hasError('required')) { Email is required }\n                @if (loginForm.get('email')?.hasError('email')) { Enter a valid email }\n            </p>\n            }\n        </div>\n        <div class=\"login-page-container-form-login-input\">\n            <p>Password</p>\n            <input type=\"password\" placeholder=\"Enter your password\" class=\"input\" formControlName=\"password\" />\n            @if (loginForm.get('password')?.invalid && loginForm.get('password')?.touched) {\n            <p class=\"red\">\n                @if (loginForm.get('password')?.hasError('required')) { Password is required }\n                @if (loginForm.get('password')?.hasError('minlength')) { Password must be at least 8 characters }\n            </p>\n            }\n        </div>\n        <!-- <div class=\"login-page-container-form-login-remember\">\n            <p>Forgot password? <span class=\"login-page-container-switch-span\" (click)=\"forgot = !forgot\">Click\n                    here</span></p>\n        </div> -->\n        <div class=\"login-page-container-form-login-button\">\n            <app-button size=\"medium\" label=\"Login\" (onClick)=\"sendLogin()\"></app-button>\n            @if(errorMessageLogin){\n            <p class=\"red\">{{errorMessageLogin}}</p>\n            }\n        </div>\n    </div>\n    }@else if(forgot && !register){\n    <div class=\"login-page-container-form-login\">\n        <h3>Restore password to PRBook!</h3>\n        <div class=\"login-page-container-form-login-input\">\n            <p>Email</p>\n            <input type=\"text\" placeholder=\"Enter you email\" class=\"input\" />\n        </div>\n        <div class=\"login-page-container-form-register-button\">\n            <app-button size=\"medium\" label=\"Restore password\"></app-button>\n        </div>\n        <div class=\"login-page-container-form-login-remember\">\n            <p>Or maybe you want go back to login?<span class=\"login-page-container-switch-span\"\n                    (click)=\"forgot = !forgot\">Click here</span></p>\n        </div>\n    </div>\n    }\n    @else {\n    <div class=\"login-page-container-form-register\" [formGroup]=\"registerForm\">\n        <h3>Register to PRBook!</h3>\n        <div class=\"login-page-container-form-register-input\">\n            <p>Email</p>\n            <input type=\"email\" placeholder=\"Enter you email\" formControlName=\"email\" class=\"input\" />\n            @if (registerForm.get('email')?.invalid && registerForm.get('email')?.touched) {\n            <p class=\"red\">\n                @if (registerForm.get('email')?.hasError('required')) { Email is required }\n                @if (registerForm.get('email')?.hasError('email')) { Enter a valid email }\n            </p>\n            }\n        </div>\n        <div class=\"login-page-container-form-register-input\">\n            <p>Name</p>\n            <input type=\"text\" placeholder=\"Enter you name\" formControlName=\"name\" class=\"input\" />\n            @if (registerForm.get('name')?.invalid && registerForm.get('name')?.touched) {\n            <p class=\"red\">\n                @if (registerForm.get('name')?.hasError('required')) { Name is required }\n                @if (registerForm.get('name')?.hasError('minlength')) { Name must be at least 3 characters }\n            </p>\n            }\n        </div>\n        <div class=\"login-page-container-form-register-input\">\n            <p>Password</p>\n            <input type=\"password\" placeholder=\"Enter your password\" formControlName=\"password\" class=\"input\" />\n            @if (registerForm.get('password')?.invalid && registerForm.get('password')?.touched) {\n            <p class=\"red\">\n                @if (registerForm.get('password')?.hasError('required')) { Password is required }\n                @if (registerForm.get('password')?.hasError('minlength')) { Password must be at least 8 characters }\n            </p>\n            }\n        </div>\n        <div class=\"login-page-container-form-register-input\">\n            <p>Confirm password</p>\n            <input type=\"password\" placeholder=\"Confirm your password\" formControlName=\"confirmPassword\"\n                class=\"input\" />\n            @if (registerForm.get('confirmPassword')?.invalid && registerForm.get('confirmPassword')?.touched) {\n            <p class=\"red\">\n                @if (registerForm.get('confirmPassword')?.hasError('required')) { Confirm Password is required }\n                @if (registerForm.get('confirmPassword')?.hasError('minlength')) { Confirm Password must be at least 8\n                characters }\n            </p>\n            }\n\n            @if (registerForm.get('password')?.value !== registerForm.get('confirmPassword')?.value &&\n            registerForm.get('confirmPassword')?.touched) {\n            <p class=\"red\">Passwords do not match</p>\n            }\n        </div>\n        <div class=\"login-page-container-form-register-button\">\n            <app-button size=\"medium\" label=\"Register\" (onClick)=\"sendRegister()\"></app-button>\n        </div>\n    </div>\n    }\n    <div class=\"login-page-container-switch\">\n        @if(!register && !forgot){\n        <p>You dont have an account? <span class=\"login-page-container-switch-span\"\n                (click)=\"register = !register\">Register\n                now!</span></p>\n        }@else {\n        <p>You have an account? <span class=\"login-page-container-switch-span\"\n                (click)=\"register = !register && forgot = !forgot\">Login\n                now!</span></p>\n        }\n    </div>\n    }@else {\n    <p>Loading please wait...</p>\n    }\n    <p>{{message}}</p>\n</div>"
        },
        {
            "name": "PrHistoryPageComponent",
            "id": "component-PrHistoryPageComponent-d9a1b9ca2848db0b049d7792bcd40f8198d3be882e3336fb75e10d86e1b7eeadcef4f7cd57eebd652e6cbd3c122ccf8b43b327325543bff241edd20549d2908c",
            "file": "src/app/pages/pr-history-page/pr-history-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pr-history-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pr-history-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-pr-history-page',\n  standalone: true,\n  imports: [],\n  templateUrl: './pr-history-page.component.html',\n  styleUrl: './pr-history-page.component.scss'\n})\nexport class PrHistoryPageComponent {\n\n}\n",
            "styleUrl": "./pr-history-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>pr-history-page works!</p>\n"
        },
        {
            "name": "StartingPageComponent",
            "id": "component-StartingPageComponent-c5b826cde2d34e12c6d8fba03e607e492af791c777ceb74f9729eb2fa7d42789e0186444ccde1fdf1c3cfed9e1bb940e9431cc36d2533c61c730bc087b306556",
            "file": "src/app/pages/starting-page/starting-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-starting-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./starting-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../../components/elements/button/button.component';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-starting-page',\n  standalone: true,\n  imports: [ButtonComponent],\n  templateUrl: './starting-page.component.html',\n  styleUrl: './starting-page.component.scss',\n})\nexport class StartingPageComponent {\n  constructor(private router: Router) {}\n\n  navigateToLogin() {\n    this.router.navigate(['/login']);\n  }\n}\n",
            "styleUrl": "./starting-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"starting-page-container\">\n    <div class=\"starting-page-container-top\">\n        <div class=\"starting-page-container-top-title\">\n            <h1>Welcome to PRBook!</h1>\n        </div>\n    </div>\n    <div class=\"starting-page-container-mid\">\n        <div class=\"starting-page-container-mid-left\">\n            <h2>Your progress, your motivation, your personal bests</h2>\n            <h3>Track your athletic achievements with ease:</h3>\n            <p style=\"display: flex;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                    fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                    class=\"icon icon-tabler icons-tabler-outline icon-tabler-barbell\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path d=\"M2 12h1\" />\n                    <path d=\"M6 8h-2a1 1 0 0 0 -1 1v6a1 1 0 0 0 1 1h2\" />\n                    <path d=\"M6 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n                    <path d=\"M9 12h6\" />\n                    <path d=\"M15 7v10a1 1 0 0 0 1 1h1a1 1 0 0 0 1 -1v-10a1 1 0 0 0 -1 -1h-1a1 1 0 0 0 -1 1z\" />\n                    <path d=\"M18 8h2a1 1 0 0 1 1 1v6a1 1 0 0 1 -1 1h-2\" />\n                    <path d=\"M22 12h-1\" />\n                </svg><strong>Strength Records</strong> – Log your gym PRs and monitor your progress.</p>\n            <p style=\"display: flex;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                    fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                    class=\"icon icon-tabler icons-tabler-outline icon-tabler-run\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path d=\"M13 4m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n                    <path d=\"M4 17l5 1l.75 -1.5\" />\n                    <path d=\"M15 21l0 -4l-4 -3l1 -6\" />\n                    <path d=\"M7 12l0 -3l5 -1l3 3l3 1\" />\n                </svg><strong>Endurance Milestones</strong> – Record your best runs, rides, and swims.</p>\n            <p style=\"display: flex;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                    fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                    class=\"icon icon-tabler icons-tabler-outline icon-tabler-scale-outline\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path d=\"M3 3m0 4a4 4 0 0 1 4 -4h10a4 4 0 0 1 4 4v10a4 4 0 0 1 -4 4h-10a4 4 0 0 1 -4 -4z\" />\n                    <path\n                        d=\"M12 7c1.956 0 3.724 .802 5 2.095l-2.956 2.904a3 3 0 0 0 -2.038 -.799a3 3 0 0 0 -2.038 .798l-2.956 -2.903a6.979 6.979 0 0 1 5 -2.095z\" />\n                </svg><strong>Body Metrics</strong> – Keep track of your weight, muscle mass, and more.</p>\n            <p>Stay motivated, celebrate every success, and push your limits. Let’s achieve your goals together!\n            </p>\n            <app-button label=\"Get started now!\" size=\"large\" (onClick)=\"navigateToLogin()\"></app-button>\n        </div>\n        <div class=\"starting-page-container-mid-right\">\n            <img src=\"/assets/images/starting-page3.png\" alt=\"Starting page image\">\n        </div>\n    </div>\n</div>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "account",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/appwrite.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Account(client)"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
            },
            {
                "name": "client",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/appwrite.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Client()"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "User",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/services/auth-service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/lib/appwrite.ts": [
                {
                    "name": "account",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/appwrite.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Account(client)"
                },
                {
                    "name": "client",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/appwrite.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Client()"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/services/auth-service.ts": [
                {
                    "name": "User",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/services/auth-service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/elements/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/elements/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/no-auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "NoAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home-page/home-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pr-history-page/pr-history-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PrHistoryPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/starting-page/starting-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StartingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/appwrite-db.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppwriteDbService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth-service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interfaces/appwrite-db.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RunningAndCyclingRecords",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/interfaces/appwrite-db.interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RunningAndCyclingRecordsDocuments",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/lib/appwrite.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "account",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/appwrite.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "client",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}